/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
    $(".portlet-header").css("cursor", "auto");
});

var percentileThreshold = 0;
var showControllersOnly = false;
var seriesFilter = "";
var filtersOnlySampleSeries = true;

// Fixes time stamps
function fixTimeStamps(series, offset){
    $.each(series, function(index, item) {
        $.each(item.data, function(index, coord) {
            coord[0] += offset;
        });
    });
}

// Check if the specified jquery object is a graph
function isGraph(object){
    return object.data('plot') !== undefined;
}

/**
 * Export graph to a PNG
 */
function exportToPNG(graphName, target) {
    var plot = $("#"+graphName).data('plot');
    var flotCanvas = plot.getCanvas();
    var image = flotCanvas.toDataURL();
    image = image.replace("image/png", "image/octet-stream");
    
    var downloadAttrSupported = ("download" in document.createElement("a"));
    if(downloadAttrSupported === true) {
        target.download = graphName + ".png";
        target.href = image;
    }
    else {
        document.location.href = image;
    }
    
}

// Override the specified graph options to fit the requirements of an overview
function prepareOverviewOptions(graphOptions){
    var overviewOptions = {
        series: {
            shadowSize: 0,
            lines: {
                lineWidth: 1
            },
            points: {
                // Show points on overview only when linked graph does not show
                // lines
                show: getProperty('series.lines.show', graphOptions) == false,
                radius : 1
            }
        },
        xaxis: {
            ticks: 2,
            axisLabel: null
        },
        yaxis: {
            ticks: 2,
            axisLabel: null
        },
        legend: {
            show: false,
            container: null
        },
        grid: {
            hoverable: false
        },
        tooltip: false
    };
    return $.extend(true, {}, graphOptions, overviewOptions);
}

// Force axes boundaries using graph extra options
function prepareOptions(options, data) {
    options.canvas = true;
    var extraOptions = data.extraOptions;
    if(extraOptions !== undefined){
        var xOffset = options.xaxis.mode === "time" ? 25200000 : 0;
        var yOffset = options.yaxis.mode === "time" ? 25200000 : 0;

        if(!isNaN(extraOptions.minX))
        	options.xaxis.min = parseFloat(extraOptions.minX) + xOffset;
        
        if(!isNaN(extraOptions.maxX))
        	options.xaxis.max = parseFloat(extraOptions.maxX) + xOffset;
        
        if(!isNaN(extraOptions.minY))
        	options.yaxis.min = parseFloat(extraOptions.minY) + yOffset;
        
        if(!isNaN(extraOptions.maxY))
        	options.yaxis.max = parseFloat(extraOptions.maxY) + yOffset;
    }
}

// Filter, mark series and sort data
function prepareSeries(data){
    var result = data.result;

    // Keep only series when needed
    if(seriesFilter && (!filtersOnlySampleSeries || result.supportsControllersDiscrimination)){
        // Insensitive case matching
        var regexp = new RegExp(seriesFilter, 'i');
        result.series = $.grep(result.series, function(series, index){
            return regexp.test(series.label);
        });
    }

    // Keep only controllers series when supported and needed
    if(result.supportsControllersDiscrimination && showControllersOnly){
        result.series = $.grep(result.series, function(series, index){
            return series.isController;
        });
    }

    // Sort data and mark series
    $.each(result.series, function(index, series) {
        series.data.sort(compareByXCoordinate);
        series.color = index;
    });
}

// Set the zoom on the specified plot object
function zoomPlot(plot, xmin, xmax, ymin, ymax){
    var axes = plot.getAxes();
    // Override axes min and max options
    $.extend(true, axes, {
        xaxis: {
            options : { min: xmin, max: xmax }
        },
        yaxis: {
            options : { min: ymin, max: ymax }
        }
    });

    // Redraw the plot
    plot.setupGrid();
    plot.draw();
}

// Prepares DOM items to add zoom function on the specified graph
function setGraphZoomable(graphSelector, overviewSelector){
    var graph = $(graphSelector);
    var overview = $(overviewSelector);

    // Ignore mouse down event
    graph.bind("mousedown", function() { return false; });
    overview.bind("mousedown", function() { return false; });

    // Zoom on selection
    graph.bind("plotselected", function (event, ranges) {
        // clamp the zooming to prevent infinite zoom
        if (ranges.xaxis.to - ranges.xaxis.from < 0.00001) {
            ranges.xaxis.to = ranges.xaxis.from + 0.00001;
        }
        if (ranges.yaxis.to - ranges.yaxis.from < 0.00001) {
            ranges.yaxis.to = ranges.yaxis.from + 0.00001;
        }

        // Do the zooming
        var plot = graph.data('plot');
        zoomPlot(plot, ranges.xaxis.from, ranges.xaxis.to, ranges.yaxis.from, ranges.yaxis.to);
        plot.clearSelection();

        // Synchronize overview selection
        overview.data('plot').setSelection(ranges, true);
    });

    // Zoom linked graph on overview selection
    overview.bind("plotselected", function (event, ranges) {
        graph.data('plot').setSelection(ranges);
    });

    // Reset linked graph zoom when reseting overview selection
    overview.bind("plotunselected", function () {
        var overviewAxes = overview.data('plot').getAxes();
        zoomPlot(graph.data('plot'), overviewAxes.xaxis.min, overviewAxes.xaxis.max, overviewAxes.yaxis.min, overviewAxes.yaxis.max);
    });
}

var responseTimePercentilesInfos = {
        data: {"result": {"minY": 380.0, "minX": 0.0, "maxY": 33898.0, "series": [{"data": [[0.0, 416.0], [0.1, 495.0], [0.2, 496.0], [0.3, 500.0], [0.4, 501.0], [0.5, 503.0], [0.6, 504.0], [0.7, 506.0], [0.8, 508.0], [0.9, 509.0], [1.0, 510.0], [1.1, 512.0], [1.2, 513.0], [1.3, 514.0], [1.4, 514.0], [1.5, 517.0], [1.6, 518.0], [1.7, 519.0], [1.8, 523.0], [1.9, 524.0], [2.0, 525.0], [2.1, 526.0], [2.2, 529.0], [2.3, 529.0], [2.4, 530.0], [2.5, 531.0], [2.6, 532.0], [2.7, 534.0], [2.8, 538.0], [2.9, 543.0], [3.0, 544.0], [3.1, 547.0], [3.2, 552.0], [3.3, 557.0], [3.4, 565.0], [3.5, 568.0], [3.6, 593.0], [3.7, 615.0], [3.8, 618.0], [3.9, 642.0], [4.0, 652.0], [4.1, 676.0], [4.2, 682.0], [4.3, 701.0], [4.4, 703.0], [4.5, 705.0], [4.6, 707.0], [4.7, 710.0], [4.8, 711.0], [4.9, 713.0], [5.0, 713.0], [5.1, 714.0], [5.2, 714.0], [5.3, 715.0], [5.4, 716.0], [5.5, 717.0], [5.6, 718.0], [5.7, 718.0], [5.8, 719.0], [5.9, 720.0], [6.0, 723.0], [6.1, 725.0], [6.2, 725.0], [6.3, 726.0], [6.4, 728.0], [6.5, 728.0], [6.6, 730.0], [6.7, 730.0], [6.8, 732.0], [6.9, 734.0], [7.0, 736.0], [7.1, 736.0], [7.2, 736.0], [7.3, 737.0], [7.4, 739.0], [7.5, 740.0], [7.6, 742.0], [7.7, 742.0], [7.8, 744.0], [7.9, 744.0], [8.0, 744.0], [8.1, 745.0], [8.2, 745.0], [8.3, 746.0], [8.4, 746.0], [8.5, 748.0], [8.6, 748.0], [8.7, 749.0], [8.8, 749.0], [8.9, 749.0], [9.0, 750.0], [9.1, 750.0], [9.2, 750.0], [9.3, 750.0], [9.4, 751.0], [9.5, 751.0], [9.6, 752.0], [9.7, 752.0], [9.8, 753.0], [9.9, 753.0], [10.0, 754.0], [10.1, 755.0], [10.2, 755.0], [10.3, 756.0], [10.4, 757.0], [10.5, 758.0], [10.6, 758.0], [10.7, 758.0], [10.8, 759.0], [10.9, 760.0], [11.0, 760.0], [11.1, 760.0], [11.2, 760.0], [11.3, 761.0], [11.4, 761.0], [11.5, 762.0], [11.6, 762.0], [11.7, 762.0], [11.8, 763.0], [11.9, 763.0], [12.0, 763.0], [12.1, 763.0], [12.2, 764.0], [12.3, 764.0], [12.4, 764.0], [12.5, 765.0], [12.6, 765.0], [12.7, 766.0], [12.8, 767.0], [12.9, 767.0], [13.0, 767.0], [13.1, 768.0], [13.2, 769.0], [13.3, 770.0], [13.4, 770.0], [13.5, 770.0], [13.6, 770.0], [13.7, 770.0], [13.8, 771.0], [13.9, 771.0], [14.0, 772.0], [14.1, 772.0], [14.2, 773.0], [14.3, 774.0], [14.4, 774.0], [14.5, 775.0], [14.6, 776.0], [14.7, 777.0], [14.8, 777.0], [14.9, 778.0], [15.0, 778.0], [15.1, 779.0], [15.2, 781.0], [15.3, 781.0], [15.4, 782.0], [15.5, 783.0], [15.6, 783.0], [15.7, 784.0], [15.8, 785.0], [15.9, 785.0], [16.0, 786.0], [16.1, 786.0], [16.2, 786.0], [16.3, 787.0], [16.4, 787.0], [16.5, 787.0], [16.6, 788.0], [16.7, 788.0], [16.8, 789.0], [16.9, 789.0], [17.0, 789.0], [17.1, 790.0], [17.2, 790.0], [17.3, 791.0], [17.4, 792.0], [17.5, 792.0], [17.6, 793.0], [17.7, 793.0], [17.8, 793.0], [17.9, 793.0], [18.0, 794.0], [18.1, 794.0], [18.2, 794.0], [18.3, 795.0], [18.4, 795.0], [18.5, 796.0], [18.6, 797.0], [18.7, 798.0], [18.8, 799.0], [18.9, 800.0], [19.0, 802.0], [19.1, 803.0], [19.2, 804.0], [19.3, 805.0], [19.4, 806.0], [19.5, 818.0], [19.6, 820.0], [19.7, 821.0], [19.8, 821.0], [19.9, 822.0], [20.0, 825.0], [20.1, 826.0], [20.2, 827.0], [20.3, 829.0], [20.4, 833.0], [20.5, 839.0], [20.6, 854.0], [20.7, 856.0], [20.8, 857.0], [20.9, 860.0], [21.0, 860.0], [21.1, 861.0], [21.2, 871.0], [21.3, 878.0], [21.4, 885.0], [21.5, 893.0], [21.6, 903.0], [21.7, 909.0], [21.8, 936.0], [21.9, 937.0], [22.0, 942.0], [22.1, 949.0], [22.2, 950.0], [22.3, 951.0], [22.4, 952.0], [22.5, 953.0], [22.6, 956.0], [22.7, 957.0], [22.8, 957.0], [22.9, 958.0], [23.0, 965.0], [23.1, 968.0], [23.2, 968.0], [23.3, 972.0], [23.4, 975.0], [23.5, 975.0], [23.6, 977.0], [23.7, 978.0], [23.8, 978.0], [23.9, 979.0], [24.0, 981.0], [24.1, 981.0], [24.2, 983.0], [24.3, 983.0], [24.4, 984.0], [24.5, 987.0], [24.6, 988.0], [24.7, 989.0], [24.8, 989.0], [24.9, 990.0], [25.0, 990.0], [25.1, 991.0], [25.2, 992.0], [25.3, 993.0], [25.4, 993.0], [25.5, 994.0], [25.6, 995.0], [25.7, 997.0], [25.8, 997.0], [25.9, 997.0], [26.0, 997.0], [26.1, 998.0], [26.2, 998.0], [26.3, 998.0], [26.4, 999.0], [26.5, 999.0], [26.6, 999.0], [26.7, 1000.0], [26.8, 1001.0], [26.9, 1001.0], [27.0, 1001.0], [27.1, 1001.0], [27.2, 1001.0], [27.3, 1002.0], [27.4, 1003.0], [27.5, 1003.0], [27.6, 1004.0], [27.7, 1004.0], [27.8, 1004.0], [27.9, 1004.0], [28.0, 1004.0], [28.1, 1004.0], [28.2, 1004.0], [28.3, 1005.0], [28.4, 1005.0], [28.5, 1005.0], [28.6, 1006.0], [28.7, 1006.0], [28.8, 1006.0], [28.9, 1006.0], [29.0, 1006.0], [29.1, 1006.0], [29.2, 1006.0], [29.3, 1007.0], [29.4, 1007.0], [29.5, 1007.0], [29.6, 1007.0], [29.7, 1007.0], [29.8, 1007.0], [29.9, 1007.0], [30.0, 1007.0], [30.1, 1007.0], [30.2, 1008.0], [30.3, 1008.0], [30.4, 1008.0], [30.5, 1008.0], [30.6, 1008.0], [30.7, 1009.0], [30.8, 1009.0], [30.9, 1009.0], [31.0, 1009.0], [31.1, 1009.0], [31.2, 1009.0], [31.3, 1009.0], [31.4, 1010.0], [31.5, 1010.0], [31.6, 1010.0], [31.7, 1010.0], [31.8, 1010.0], [31.9, 1010.0], [32.0, 1010.0], [32.1, 1011.0], [32.2, 1011.0], [32.3, 1011.0], [32.4, 1011.0], [32.5, 1011.0], [32.6, 1011.0], [32.7, 1011.0], [32.8, 1011.0], [32.9, 1011.0], [33.0, 1012.0], [33.1, 1012.0], [33.2, 1012.0], [33.3, 1012.0], [33.4, 1012.0], [33.5, 1012.0], [33.6, 1012.0], [33.7, 1012.0], [33.8, 1012.0], [33.9, 1013.0], [34.0, 1013.0], [34.1, 1013.0], [34.2, 1013.0], [34.3, 1013.0], [34.4, 1013.0], [34.5, 1014.0], [34.6, 1014.0], [34.7, 1014.0], [34.8, 1014.0], [34.9, 1014.0], [35.0, 1014.0], [35.1, 1015.0], [35.2, 1015.0], [35.3, 1015.0], [35.4, 1015.0], [35.5, 1015.0], [35.6, 1015.0], [35.7, 1015.0], [35.8, 1015.0], [35.9, 1015.0], [36.0, 1015.0], [36.1, 1016.0], [36.2, 1016.0], [36.3, 1016.0], [36.4, 1016.0], [36.5, 1016.0], [36.6, 1016.0], [36.7, 1016.0], [36.8, 1016.0], [36.9, 1016.0], [37.0, 1016.0], [37.1, 1017.0], [37.2, 1017.0], [37.3, 1017.0], [37.4, 1017.0], [37.5, 1018.0], [37.6, 1018.0], [37.7, 1018.0], [37.8, 1018.0], [37.9, 1018.0], [38.0, 1018.0], [38.1, 1018.0], [38.2, 1018.0], [38.3, 1018.0], [38.4, 1019.0], [38.5, 1019.0], [38.6, 1019.0], [38.7, 1019.0], [38.8, 1019.0], [38.9, 1019.0], [39.0, 1019.0], [39.1, 1019.0], [39.2, 1020.0], [39.3, 1020.0], [39.4, 1020.0], [39.5, 1020.0], [39.6, 1020.0], [39.7, 1020.0], [39.8, 1021.0], [39.9, 1021.0], [40.0, 1021.0], [40.1, 1021.0], [40.2, 1021.0], [40.3, 1021.0], [40.4, 1021.0], [40.5, 1022.0], [40.6, 1022.0], [40.7, 1022.0], [40.8, 1022.0], [40.9, 1022.0], [41.0, 1022.0], [41.1, 1023.0], [41.2, 1023.0], [41.3, 1023.0], [41.4, 1023.0], [41.5, 1023.0], [41.6, 1023.0], [41.7, 1024.0], [41.8, 1024.0], [41.9, 1024.0], [42.0, 1025.0], [42.1, 1025.0], [42.2, 1025.0], [42.3, 1025.0], [42.4, 1025.0], [42.5, 1026.0], [42.6, 1026.0], [42.7, 1026.0], [42.8, 1026.0], [42.9, 1026.0], [43.0, 1026.0], [43.1, 1026.0], [43.2, 1026.0], [43.3, 1027.0], [43.4, 1027.0], [43.5, 1027.0], [43.6, 1027.0], [43.7, 1027.0], [43.8, 1027.0], [43.9, 1028.0], [44.0, 1028.0], [44.1, 1028.0], [44.2, 1029.0], [44.3, 1029.0], [44.4, 1029.0], [44.5, 1029.0], [44.6, 1029.0], [44.7, 1030.0], [44.8, 1030.0], [44.9, 1030.0], [45.0, 1031.0], [45.1, 1031.0], [45.2, 1033.0], [45.3, 1033.0], [45.4, 1033.0], [45.5, 1034.0], [45.6, 1034.0], [45.7, 1034.0], [45.8, 1035.0], [45.9, 1035.0], [46.0, 1035.0], [46.1, 1036.0], [46.2, 1036.0], [46.3, 1036.0], [46.4, 1037.0], [46.5, 1037.0], [46.6, 1037.0], [46.7, 1037.0], [46.8, 1037.0], [46.9, 1038.0], [47.0, 1038.0], [47.1, 1038.0], [47.2, 1038.0], [47.3, 1040.0], [47.4, 1040.0], [47.5, 1041.0], [47.6, 1041.0], [47.7, 1041.0], [47.8, 1042.0], [47.9, 1042.0], [48.0, 1042.0], [48.1, 1042.0], [48.2, 1042.0], [48.3, 1042.0], [48.4, 1042.0], [48.5, 1043.0], [48.6, 1043.0], [48.7, 1043.0], [48.8, 1044.0], [48.9, 1044.0], [49.0, 1044.0], [49.1, 1044.0], [49.2, 1044.0], [49.3, 1044.0], [49.4, 1045.0], [49.5, 1045.0], [49.6, 1045.0], [49.7, 1046.0], [49.8, 1046.0], [49.9, 1046.0], [50.0, 1046.0], [50.1, 1046.0], [50.2, 1046.0], [50.3, 1046.0], [50.4, 1047.0], [50.5, 1047.0], [50.6, 1047.0], [50.7, 1048.0], [50.8, 1048.0], [50.9, 1048.0], [51.0, 1048.0], [51.1, 1048.0], [51.2, 1048.0], [51.3, 1048.0], [51.4, 1049.0], [51.5, 1049.0], [51.6, 1049.0], [51.7, 1049.0], [51.8, 1049.0], [51.9, 1049.0], [52.0, 1050.0], [52.1, 1050.0], [52.2, 1050.0], [52.3, 1050.0], [52.4, 1050.0], [52.5, 1050.0], [52.6, 1051.0], [52.7, 1051.0], [52.8, 1051.0], [52.9, 1051.0], [53.0, 1052.0], [53.1, 1052.0], [53.2, 1052.0], [53.3, 1052.0], [53.4, 1052.0], [53.5, 1053.0], [53.6, 1053.0], [53.7, 1053.0], [53.8, 1053.0], [53.9, 1053.0], [54.0, 1053.0], [54.1, 1054.0], [54.2, 1054.0], [54.3, 1054.0], [54.4, 1054.0], [54.5, 1054.0], [54.6, 1054.0], [54.7, 1054.0], [54.8, 1055.0], [54.9, 1055.0], [55.0, 1055.0], [55.1, 1055.0], [55.2, 1055.0], [55.3, 1055.0], [55.4, 1055.0], [55.5, 1055.0], [55.6, 1056.0], [55.7, 1056.0], [55.8, 1056.0], [55.9, 1056.0], [56.0, 1056.0], [56.1, 1056.0], [56.2, 1057.0], [56.3, 1057.0], [56.4, 1057.0], [56.5, 1057.0], [56.6, 1058.0], [56.7, 1059.0], [56.8, 1059.0], [56.9, 1059.0], [57.0, 1059.0], [57.1, 1060.0], [57.2, 1060.0], [57.3, 1060.0], [57.4, 1060.0], [57.5, 1060.0], [57.6, 1060.0], [57.7, 1061.0], [57.8, 1061.0], [57.9, 1061.0], [58.0, 1061.0], [58.1, 1061.0], [58.2, 1062.0], [58.3, 1062.0], [58.4, 1062.0], [58.5, 1062.0], [58.6, 1062.0], [58.7, 1063.0], [58.8, 1063.0], [58.9, 1064.0], [59.0, 1064.0], [59.1, 1064.0], [59.2, 1065.0], [59.3, 1065.0], [59.4, 1066.0], [59.5, 1066.0], [59.6, 1066.0], [59.7, 1066.0], [59.8, 1066.0], [59.9, 1067.0], [60.0, 1067.0], [60.1, 1067.0], [60.2, 1068.0], [60.3, 1069.0], [60.4, 1071.0], [60.5, 1072.0], [60.6, 1073.0], [60.7, 1080.0], [60.8, 1081.0], [60.9, 1082.0], [61.0, 1083.0], [61.1, 1086.0], [61.2, 1087.0], [61.3, 1088.0], [61.4, 1089.0], [61.5, 1091.0], [61.6, 1092.0], [61.7, 1093.0], [61.8, 1094.0], [61.9, 1096.0], [62.0, 1099.0], [62.1, 1101.0], [62.2, 1102.0], [62.3, 1107.0], [62.4, 1113.0], [62.5, 1115.0], [62.6, 1130.0], [62.7, 1134.0], [62.8, 1157.0], [62.9, 1189.0], [63.0, 1190.0], [63.1, 1193.0], [63.2, 1199.0], [63.3, 1207.0], [63.4, 1212.0], [63.5, 1214.0], [63.6, 1228.0], [63.7, 1230.0], [63.8, 1231.0], [63.9, 1232.0], [64.0, 1234.0], [64.1, 1237.0], [64.2, 1238.0], [64.3, 1239.0], [64.4, 1240.0], [64.5, 1241.0], [64.6, 1244.0], [64.7, 1245.0], [64.8, 1250.0], [64.9, 1252.0], [65.0, 1257.0], [65.1, 1258.0], [65.2, 1259.0], [65.3, 1260.0], [65.4, 1261.0], [65.5, 1261.0], [65.6, 1261.0], [65.7, 1261.0], [65.8, 1263.0], [65.9, 1263.0], [66.0, 1264.0], [66.1, 1265.0], [66.2, 1265.0], [66.3, 1266.0], [66.4, 1266.0], [66.5, 1266.0], [66.6, 1266.0], [66.7, 1267.0], [66.8, 1267.0], [66.9, 1267.0], [67.0, 1267.0], [67.1, 1268.0], [67.2, 1268.0], [67.3, 1268.0], [67.4, 1269.0], [67.5, 1269.0], [67.6, 1269.0], [67.7, 1269.0], [67.8, 1270.0], [67.9, 1271.0], [68.0, 1271.0], [68.1, 1271.0], [68.2, 1271.0], [68.3, 1272.0], [68.4, 1272.0], [68.5, 1272.0], [68.6, 1273.0], [68.7, 1273.0], [68.8, 1274.0], [68.9, 1274.0], [69.0, 1274.0], [69.1, 1275.0], [69.2, 1275.0], [69.3, 1275.0], [69.4, 1276.0], [69.5, 1276.0], [69.6, 1276.0], [69.7, 1277.0], [69.8, 1277.0], [69.9, 1278.0], [70.0, 1278.0], [70.1, 1278.0], [70.2, 1279.0], [70.3, 1280.0], [70.4, 1280.0], [70.5, 1281.0], [70.6, 1282.0], [70.7, 1283.0], [70.8, 1283.0], [70.9, 1284.0], [71.0, 1285.0], [71.1, 1286.0], [71.2, 1286.0], [71.3, 1287.0], [71.4, 1288.0], [71.5, 1288.0], [71.6, 1291.0], [71.7, 1293.0], [71.8, 1295.0], [71.9, 1298.0], [72.0, 1300.0], [72.1, 1300.0], [72.2, 1301.0], [72.3, 1302.0], [72.4, 1304.0], [72.5, 1304.0], [72.6, 1305.0], [72.7, 1305.0], [72.8, 1306.0], [72.9, 1306.0], [73.0, 1307.0], [73.1, 1308.0], [73.2, 1309.0], [73.3, 1311.0], [73.4, 1311.0], [73.5, 1311.0], [73.6, 1312.0], [73.7, 1313.0], [73.8, 1313.0], [73.9, 1314.0], [74.0, 1314.0], [74.1, 1315.0], [74.2, 1315.0], [74.3, 1316.0], [74.4, 1316.0], [74.5, 1317.0], [74.6, 1318.0], [74.7, 1319.0], [74.8, 1319.0], [74.9, 1320.0], [75.0, 1321.0], [75.1, 1322.0], [75.2, 1323.0], [75.3, 1323.0], [75.4, 1325.0], [75.5, 1325.0], [75.6, 1327.0], [75.7, 1329.0], [75.8, 1331.0], [75.9, 1331.0], [76.0, 1332.0], [76.1, 1332.0], [76.2, 1334.0], [76.3, 1336.0], [76.4, 1340.0], [76.5, 1346.0], [76.6, 1346.0], [76.7, 1351.0], [76.8, 1356.0], [76.9, 1358.0], [77.0, 1361.0], [77.1, 1368.0], [77.2, 1376.0], [77.3, 1379.0], [77.4, 1383.0], [77.5, 1388.0], [77.6, 1399.0], [77.7, 1413.0], [77.8, 1430.0], [77.9, 1439.0], [78.0, 1448.0], [78.1, 1455.0], [78.2, 1464.0], [78.3, 1468.0], [78.4, 1482.0], [78.5, 1490.0], [78.6, 1494.0], [78.7, 1499.0], [78.8, 1499.0], [78.9, 1500.0], [79.0, 1502.0], [79.1, 1506.0], [79.2, 1508.0], [79.3, 1509.0], [79.4, 1510.0], [79.5, 1512.0], [79.6, 1513.0], [79.7, 1515.0], [79.8, 1517.0], [79.9, 1519.0], [80.0, 1520.0], [80.1, 1520.0], [80.2, 1523.0], [80.3, 1523.0], [80.4, 1525.0], [80.5, 1526.0], [80.6, 1527.0], [80.7, 1529.0], [80.8, 1530.0], [80.9, 1531.0], [81.0, 1533.0], [81.1, 1534.0], [81.2, 1535.0], [81.3, 1536.0], [81.4, 1539.0], [81.5, 1541.0], [81.6, 1545.0], [81.7, 1546.0], [81.8, 1549.0], [81.9, 1552.0], [82.0, 1554.0], [82.1, 1559.0], [82.2, 1561.0], [82.3, 1562.0], [82.4, 1564.0], [82.5, 1565.0], [82.6, 1566.0], [82.7, 1567.0], [82.8, 1568.0], [82.9, 1569.0], [83.0, 1571.0], [83.1, 1572.0], [83.2, 1572.0], [83.3, 1574.0], [83.4, 1576.0], [83.5, 1577.0], [83.6, 1578.0], [83.7, 1579.0], [83.8, 1581.0], [83.9, 1583.0], [84.0, 1584.0], [84.1, 1586.0], [84.2, 1589.0], [84.3, 1590.0], [84.4, 1591.0], [84.5, 1592.0], [84.6, 1594.0], [84.7, 1596.0], [84.8, 1601.0], [84.9, 1610.0], [85.0, 1630.0], [85.1, 1633.0], [85.2, 1640.0], [85.3, 1645.0], [85.4, 1655.0], [85.5, 1658.0], [85.6, 1675.0], [85.7, 1706.0], [85.8, 1708.0], [85.9, 1719.0], [86.0, 1725.0], [86.1, 1729.0], [86.2, 1732.0], [86.3, 1753.0], [86.4, 1757.0], [86.5, 1764.0], [86.6, 1765.0], [86.7, 1773.0], [86.8, 1775.0], [86.9, 1777.0], [87.0, 1781.0], [87.1, 1783.0], [87.2, 1787.0], [87.3, 1790.0], [87.4, 1791.0], [87.5, 1797.0], [87.6, 1799.0], [87.7, 1803.0], [87.8, 1811.0], [87.9, 1817.0], [88.0, 1821.0], [88.1, 1825.0], [88.2, 1829.0], [88.3, 1830.0], [88.4, 1831.0], [88.5, 1832.0], [88.6, 1834.0], [88.7, 1836.0], [88.8, 1837.0], [88.9, 1838.0], [89.0, 1839.0], [89.1, 1840.0], [89.2, 1840.0], [89.3, 1846.0], [89.4, 1847.0], [89.5, 1863.0], [89.6, 1871.0], [89.7, 1874.0], [89.8, 1875.0], [89.9, 1879.0], [90.0, 1884.0], [90.1, 1894.0], [90.2, 1901.0], [90.3, 1905.0], [90.4, 1906.0], [90.5, 1909.0], [90.6, 1910.0], [90.7, 1910.0], [90.8, 1923.0], [90.9, 1935.0], [91.0, 1939.0], [91.1, 1944.0], [91.2, 1957.0], [91.3, 1965.0], [91.4, 1970.0], [91.5, 1983.0], [91.6, 1993.0], [91.7, 2002.0], [91.8, 2005.0], [91.9, 2012.0], [92.0, 2018.0], [92.1, 2022.0], [92.2, 2025.0], [92.3, 2041.0], [92.4, 2045.0], [92.5, 2049.0], [92.6, 2054.0], [92.7, 2058.0], [92.8, 2071.0], [92.9, 2078.0], [93.0, 2083.0], [93.1, 2088.0], [93.2, 2090.0], [93.3, 2098.0], [93.4, 2100.0], [93.5, 2102.0], [93.6, 2106.0], [93.7, 2112.0], [93.8, 2117.0], [93.9, 2122.0], [94.0, 2134.0], [94.1, 2164.0], [94.2, 2178.0], [94.3, 2205.0], [94.4, 2214.0], [94.5, 2229.0], [94.6, 2236.0], [94.7, 2245.0], [94.8, 2260.0], [94.9, 2261.0], [95.0, 2264.0], [95.1, 2271.0], [95.2, 2278.0], [95.3, 2286.0], [95.4, 2296.0], [95.5, 2299.0], [95.6, 2323.0], [95.7, 2335.0], [95.8, 2340.0], [95.9, 2349.0], [96.0, 2357.0], [96.1, 2374.0], [96.2, 2381.0], [96.3, 2403.0], [96.4, 2420.0], [96.5, 2448.0], [96.6, 2461.0], [96.7, 2485.0], [96.8, 2522.0], [96.9, 2527.0], [97.0, 2565.0], [97.1, 2577.0], [97.2, 2604.0], [97.3, 2611.0], [97.4, 2620.0], [97.5, 2671.0], [97.6, 2689.0], [97.7, 2723.0], [97.8, 2760.0], [97.9, 2776.0], [98.0, 2795.0], [98.1, 2817.0], [98.2, 2870.0], [98.3, 2898.0], [98.4, 2913.0], [98.5, 2976.0], [98.6, 3034.0], [98.7, 3053.0], [98.8, 3107.0], [98.9, 3195.0], [99.0, 3230.0], [99.1, 3258.0], [99.2, 3353.0], [99.3, 3519.0], [99.4, 3619.0], [99.5, 3747.0], [99.6, 3854.0], [99.7, 3863.0], [99.8, 3978.0], [99.9, 4453.0]], "isOverall": false, "label": "Get Started", "isController": false}, {"data": [[0.0, 2514.0], [0.1, 2776.0], [0.2, 2880.0], [0.3, 3090.0], [0.4, 3139.0], [0.5, 3527.0], [0.6, 3770.0], [0.7, 3811.0], [0.8, 3960.0], [0.9, 4131.0], [1.0, 4270.0], [1.1, 4297.0], [1.2, 4324.0], [1.3, 4354.0], [1.4, 4401.0], [1.5, 4409.0], [1.6, 4468.0], [1.7, 4485.0], [1.8, 4499.0], [1.9, 4521.0], [2.0, 4540.0], [2.1, 4647.0], [2.2, 4793.0], [2.3, 4850.0], [2.4, 4920.0], [2.5, 4954.0], [2.6, 5017.0], [2.7, 5058.0], [2.8, 5089.0], [2.9, 5238.0], [3.0, 5264.0], [3.1, 5295.0], [3.2, 5325.0], [3.3, 5344.0], [3.4, 5468.0], [3.5, 5500.0], [3.6, 5540.0], [3.7, 5594.0], [3.8, 5656.0], [3.9, 5722.0], [4.0, 5759.0], [4.1, 5783.0], [4.2, 5833.0], [4.3, 5871.0], [4.4, 5893.0], [4.5, 5944.0], [4.6, 6019.0], [4.7, 6053.0], [4.8, 6057.0], [4.9, 6081.0], [5.0, 6280.0], [5.1, 6307.0], [5.2, 6347.0], [5.3, 6397.0], [5.4, 6444.0], [5.5, 6492.0], [5.6, 6562.0], [5.7, 6589.0], [5.8, 6632.0], [5.9, 6692.0], [6.0, 6769.0], [6.1, 6777.0], [6.2, 6798.0], [6.3, 6830.0], [6.4, 6844.0], [6.5, 6854.0], [6.6, 6874.0], [6.7, 6937.0], [6.8, 7009.0], [6.9, 7032.0], [7.0, 7042.0], [7.1, 7067.0], [7.2, 7105.0], [7.3, 7147.0], [7.4, 7199.0], [7.5, 7298.0], [7.6, 7329.0], [7.7, 7341.0], [7.8, 7360.0], [7.9, 7375.0], [8.0, 7402.0], [8.1, 7432.0], [8.2, 7513.0], [8.3, 7523.0], [8.4, 7539.0], [8.5, 7570.0], [8.6, 7585.0], [8.7, 7600.0], [8.8, 7613.0], [8.9, 7655.0], [9.0, 7683.0], [9.1, 7772.0], [9.2, 7829.0], [9.3, 7852.0], [9.4, 7869.0], [9.5, 7874.0], [9.6, 7909.0], [9.7, 8015.0], [9.8, 8074.0], [9.9, 8110.0], [10.0, 8122.0], [10.1, 8129.0], [10.2, 8153.0], [10.3, 8179.0], [10.4, 8215.0], [10.5, 8223.0], [10.6, 8269.0], [10.7, 8319.0], [10.8, 8324.0], [10.9, 8333.0], [11.0, 8352.0], [11.1, 8358.0], [11.2, 8368.0], [11.3, 8381.0], [11.4, 8410.0], [11.5, 8429.0], [11.6, 8446.0], [11.7, 8525.0], [11.8, 8560.0], [11.9, 8586.0], [12.0, 8616.0], [12.1, 8626.0], [12.2, 8648.0], [12.3, 8653.0], [12.4, 8687.0], [12.5, 8732.0], [12.6, 8785.0], [12.7, 8789.0], [12.8, 8792.0], [12.9, 8845.0], [13.0, 8864.0], [13.1, 8874.0], [13.2, 8878.0], [13.3, 8881.0], [13.4, 8905.0], [13.5, 8959.0], [13.6, 8974.0], [13.7, 8976.0], [13.8, 8994.0], [13.9, 9032.0], [14.0, 9049.0], [14.1, 9063.0], [14.2, 9108.0], [14.3, 9135.0], [14.4, 9165.0], [14.5, 9177.0], [14.6, 9195.0], [14.7, 9212.0], [14.8, 9230.0], [14.9, 9275.0], [15.0, 9302.0], [15.1, 9326.0], [15.2, 9366.0], [15.3, 9393.0], [15.4, 9402.0], [15.5, 9432.0], [15.6, 9456.0], [15.7, 9470.0], [15.8, 9481.0], [15.9, 9499.0], [16.0, 9551.0], [16.1, 9582.0], [16.2, 9590.0], [16.3, 9631.0], [16.4, 9652.0], [16.5, 9667.0], [16.6, 9703.0], [16.7, 9745.0], [16.8, 9771.0], [16.9, 9780.0], [17.0, 9803.0], [17.1, 9808.0], [17.2, 9830.0], [17.3, 9839.0], [17.4, 9864.0], [17.5, 9884.0], [17.6, 9902.0], [17.7, 9932.0], [17.8, 9979.0], [17.9, 9983.0], [18.0, 9998.0], [18.1, 10023.0], [18.2, 10045.0], [18.3, 10066.0], [18.4, 10082.0], [18.5, 10110.0], [18.6, 10111.0], [18.7, 10119.0], [18.8, 10127.0], [18.9, 10139.0], [19.0, 10145.0], [19.1, 10161.0], [19.2, 10182.0], [19.3, 10187.0], [19.4, 10211.0], [19.5, 10217.0], [19.6, 10236.0], [19.7, 10244.0], [19.8, 10268.0], [19.9, 10285.0], [20.0, 10306.0], [20.1, 10309.0], [20.2, 10320.0], [20.3, 10329.0], [20.4, 10348.0], [20.5, 10370.0], [20.6, 10374.0], [20.7, 10394.0], [20.8, 10404.0], [20.9, 10411.0], [21.0, 10414.0], [21.1, 10419.0], [21.2, 10425.0], [21.3, 10455.0], [21.4, 10465.0], [21.5, 10476.0], [21.6, 10505.0], [21.7, 10545.0], [21.8, 10573.0], [21.9, 10594.0], [22.0, 10598.0], [22.1, 10611.0], [22.2, 10620.0], [22.3, 10639.0], [22.4, 10664.0], [22.5, 10684.0], [22.6, 10704.0], [22.7, 10707.0], [22.8, 10721.0], [22.9, 10724.0], [23.0, 10744.0], [23.1, 10746.0], [23.2, 10751.0], [23.3, 10776.0], [23.4, 10804.0], [23.5, 10814.0], [23.6, 10839.0], [23.7, 10868.0], [23.8, 10889.0], [23.9, 10901.0], [24.0, 10909.0], [24.1, 10913.0], [24.2, 10926.0], [24.3, 10929.0], [24.4, 10933.0], [24.5, 10939.0], [24.6, 10948.0], [24.7, 10952.0], [24.8, 10957.0], [24.9, 10976.0], [25.0, 10987.0], [25.1, 10999.0], [25.2, 11021.0], [25.3, 11046.0], [25.4, 11063.0], [25.5, 11099.0], [25.6, 11115.0], [25.7, 11129.0], [25.8, 11140.0], [25.9, 11149.0], [26.0, 11169.0], [26.1, 11183.0], [26.2, 11189.0], [26.3, 11199.0], [26.4, 11221.0], [26.5, 11227.0], [26.6, 11241.0], [26.7, 11257.0], [26.8, 11266.0], [26.9, 11275.0], [27.0, 11281.0], [27.1, 11306.0], [27.2, 11326.0], [27.3, 11333.0], [27.4, 11353.0], [27.5, 11355.0], [27.6, 11360.0], [27.7, 11372.0], [27.8, 11386.0], [27.9, 11405.0], [28.0, 11414.0], [28.1, 11437.0], [28.2, 11440.0], [28.3, 11442.0], [28.4, 11452.0], [28.5, 11459.0], [28.6, 11463.0], [28.7, 11473.0], [28.8, 11483.0], [28.9, 11494.0], [29.0, 11498.0], [29.1, 11505.0], [29.2, 11512.0], [29.3, 11517.0], [29.4, 11527.0], [29.5, 11548.0], [29.6, 11553.0], [29.7, 11565.0], [29.8, 11591.0], [29.9, 11602.0], [30.0, 11609.0], [30.1, 11611.0], [30.2, 11631.0], [30.3, 11644.0], [30.4, 11645.0], [30.5, 11649.0], [30.6, 11662.0], [30.7, 11666.0], [30.8, 11674.0], [30.9, 11682.0], [31.0, 11686.0], [31.1, 11689.0], [31.2, 11698.0], [31.3, 11721.0], [31.4, 11724.0], [31.5, 11756.0], [31.6, 11775.0], [31.7, 11783.0], [31.8, 11785.0], [31.9, 11803.0], [32.0, 11809.0], [32.1, 11811.0], [32.2, 11819.0], [32.3, 11823.0], [32.4, 11837.0], [32.5, 11842.0], [32.6, 11867.0], [32.7, 11880.0], [32.8, 11891.0], [32.9, 11910.0], [33.0, 11913.0], [33.1, 11917.0], [33.2, 11930.0], [33.3, 11936.0], [33.4, 11937.0], [33.5, 11942.0], [33.6, 11954.0], [33.7, 11957.0], [33.8, 11959.0], [33.9, 11977.0], [34.0, 11983.0], [34.1, 11999.0], [34.2, 12006.0], [34.3, 12028.0], [34.4, 12031.0], [34.5, 12035.0], [34.6, 12063.0], [34.7, 12079.0], [34.8, 12081.0], [34.9, 12084.0], [35.0, 12088.0], [35.1, 12095.0], [35.2, 12103.0], [35.3, 12105.0], [35.4, 12125.0], [35.5, 12134.0], [35.6, 12143.0], [35.7, 12150.0], [35.8, 12159.0], [35.9, 12182.0], [36.0, 12197.0], [36.1, 12203.0], [36.2, 12212.0], [36.3, 12228.0], [36.4, 12237.0], [36.5, 12256.0], [36.6, 12269.0], [36.7, 12276.0], [36.8, 12282.0], [36.9, 12288.0], [37.0, 12315.0], [37.1, 12323.0], [37.2, 12345.0], [37.3, 12348.0], [37.4, 12354.0], [37.5, 12374.0], [37.6, 12381.0], [37.7, 12390.0], [37.8, 12412.0], [37.9, 12423.0], [38.0, 12428.0], [38.1, 12452.0], [38.2, 12485.0], [38.3, 12487.0], [38.4, 12508.0], [38.5, 12535.0], [38.6, 12552.0], [38.7, 12564.0], [38.8, 12570.0], [38.9, 12573.0], [39.0, 12575.0], [39.1, 12588.0], [39.2, 12595.0], [39.3, 12597.0], [39.4, 12600.0], [39.5, 12624.0], [39.6, 12629.0], [39.7, 12636.0], [39.8, 12640.0], [39.9, 12671.0], [40.0, 12675.0], [40.1, 12693.0], [40.2, 12705.0], [40.3, 12713.0], [40.4, 12778.0], [40.5, 12786.0], [40.6, 12799.0], [40.7, 12803.0], [40.8, 12807.0], [40.9, 12814.0], [41.0, 12829.0], [41.1, 12843.0], [41.2, 12852.0], [41.3, 12873.0], [41.4, 12881.0], [41.5, 12884.0], [41.6, 12896.0], [41.7, 12905.0], [41.8, 12907.0], [41.9, 12936.0], [42.0, 12938.0], [42.1, 12955.0], [42.2, 12969.0], [42.3, 12983.0], [42.4, 12987.0], [42.5, 12993.0], [42.6, 13016.0], [42.7, 13020.0], [42.8, 13059.0], [42.9, 13072.0], [43.0, 13091.0], [43.1, 13101.0], [43.2, 13108.0], [43.3, 13114.0], [43.4, 13128.0], [43.5, 13139.0], [43.6, 13145.0], [43.7, 13154.0], [43.8, 13155.0], [43.9, 13162.0], [44.0, 13167.0], [44.1, 13183.0], [44.2, 13193.0], [44.3, 13195.0], [44.4, 13198.0], [44.5, 13241.0], [44.6, 13247.0], [44.7, 13249.0], [44.8, 13258.0], [44.9, 13277.0], [45.0, 13290.0], [45.1, 13292.0], [45.2, 13295.0], [45.3, 13326.0], [45.4, 13329.0], [45.5, 13354.0], [45.6, 13364.0], [45.7, 13370.0], [45.8, 13388.0], [45.9, 13395.0], [46.0, 13414.0], [46.1, 13416.0], [46.2, 13424.0], [46.3, 13429.0], [46.4, 13444.0], [46.5, 13452.0], [46.6, 13457.0], [46.7, 13471.0], [46.8, 13474.0], [46.9, 13492.0], [47.0, 13522.0], [47.1, 13526.0], [47.2, 13530.0], [47.3, 13541.0], [47.4, 13545.0], [47.5, 13554.0], [47.6, 13561.0], [47.7, 13568.0], [47.8, 13594.0], [47.9, 13612.0], [48.0, 13614.0], [48.1, 13620.0], [48.2, 13622.0], [48.3, 13639.0], [48.4, 13643.0], [48.5, 13647.0], [48.6, 13664.0], [48.7, 13676.0], [48.8, 13689.0], [48.9, 13699.0], [49.0, 13705.0], [49.1, 13711.0], [49.2, 13719.0], [49.3, 13746.0], [49.4, 13763.0], [49.5, 13774.0], [49.6, 13779.0], [49.7, 13810.0], [49.8, 13818.0], [49.9, 13850.0], [50.0, 13877.0], [50.1, 13878.0], [50.2, 13884.0], [50.3, 13891.0], [50.4, 13901.0], [50.5, 13913.0], [50.6, 13933.0], [50.7, 13942.0], [50.8, 13958.0], [50.9, 13972.0], [51.0, 13993.0], [51.1, 14005.0], [51.2, 14010.0], [51.3, 14020.0], [51.4, 14043.0], [51.5, 14076.0], [51.6, 14093.0], [51.7, 14100.0], [51.8, 14104.0], [51.9, 14108.0], [52.0, 14109.0], [52.1, 14140.0], [52.2, 14159.0], [52.3, 14161.0], [52.4, 14181.0], [52.5, 14184.0], [52.6, 14199.0], [52.7, 14205.0], [52.8, 14214.0], [52.9, 14220.0], [53.0, 14245.0], [53.1, 14257.0], [53.2, 14265.0], [53.3, 14280.0], [53.4, 14289.0], [53.5, 14309.0], [53.6, 14320.0], [53.7, 14326.0], [53.8, 14333.0], [53.9, 14348.0], [54.0, 14357.0], [54.1, 14368.0], [54.2, 14388.0], [54.3, 14392.0], [54.4, 14395.0], [54.5, 14399.0], [54.6, 14421.0], [54.7, 14427.0], [54.8, 14427.0], [54.9, 14437.0], [55.0, 14465.0], [55.1, 14475.0], [55.2, 14483.0], [55.3, 14493.0], [55.4, 14502.0], [55.5, 14507.0], [55.6, 14511.0], [55.7, 14515.0], [55.8, 14517.0], [55.9, 14532.0], [56.0, 14564.0], [56.1, 14572.0], [56.2, 14580.0], [56.3, 14598.0], [56.4, 14605.0], [56.5, 14637.0], [56.6, 14646.0], [56.7, 14654.0], [56.8, 14667.0], [56.9, 14678.0], [57.0, 14680.0], [57.1, 14691.0], [57.2, 14695.0], [57.3, 14697.0], [57.4, 14702.0], [57.5, 14726.0], [57.6, 14740.0], [57.7, 14743.0], [57.8, 14752.0], [57.9, 14762.0], [58.0, 14771.0], [58.1, 14774.0], [58.2, 14775.0], [58.3, 14788.0], [58.4, 14810.0], [58.5, 14827.0], [58.6, 14829.0], [58.7, 14832.0], [58.8, 14851.0], [58.9, 14881.0], [59.0, 14909.0], [59.1, 14941.0], [59.2, 14975.0], [59.3, 14982.0], [59.4, 14993.0], [59.5, 15004.0], [59.6, 15020.0], [59.7, 15050.0], [59.8, 15073.0], [59.9, 15076.0], [60.0, 15096.0], [60.1, 15098.0], [60.2, 15101.0], [60.3, 15112.0], [60.4, 15143.0], [60.5, 15152.0], [60.6, 15172.0], [60.7, 15176.0], [60.8, 15178.0], [60.9, 15190.0], [61.0, 15195.0], [61.1, 15196.0], [61.2, 15203.0], [61.3, 15214.0], [61.4, 15223.0], [61.5, 15231.0], [61.6, 15243.0], [61.7, 15269.0], [61.8, 15292.0], [61.9, 15323.0], [62.0, 15333.0], [62.1, 15340.0], [62.2, 15354.0], [62.3, 15375.0], [62.4, 15390.0], [62.5, 15391.0], [62.6, 15406.0], [62.7, 15418.0], [62.8, 15434.0], [62.9, 15451.0], [63.0, 15456.0], [63.1, 15481.0], [63.2, 15484.0], [63.3, 15521.0], [63.4, 15528.0], [63.5, 15536.0], [63.6, 15543.0], [63.7, 15547.0], [63.8, 15554.0], [63.9, 15565.0], [64.0, 15567.0], [64.1, 15609.0], [64.2, 15611.0], [64.3, 15653.0], [64.4, 15655.0], [64.5, 15661.0], [64.6, 15677.0], [64.7, 15684.0], [64.8, 15704.0], [64.9, 15730.0], [65.0, 15745.0], [65.1, 15752.0], [65.2, 15755.0], [65.3, 15763.0], [65.4, 15769.0], [65.5, 15780.0], [65.6, 15791.0], [65.7, 15792.0], [65.8, 15812.0], [65.9, 15821.0], [66.0, 15845.0], [66.1, 15865.0], [66.2, 15891.0], [66.3, 15932.0], [66.4, 15933.0], [66.5, 15936.0], [66.6, 15946.0], [66.7, 15951.0], [66.8, 15992.0], [66.9, 16006.0], [67.0, 16015.0], [67.1, 16018.0], [67.2, 16027.0], [67.3, 16033.0], [67.4, 16042.0], [67.5, 16056.0], [67.6, 16063.0], [67.7, 16071.0], [67.8, 16079.0], [67.9, 16092.0], [68.0, 16108.0], [68.1, 16118.0], [68.2, 16124.0], [68.3, 16135.0], [68.4, 16155.0], [68.5, 16181.0], [68.6, 16183.0], [68.7, 16194.0], [68.8, 16196.0], [68.9, 16209.0], [69.0, 16219.0], [69.1, 16246.0], [69.2, 16266.0], [69.3, 16274.0], [69.4, 16287.0], [69.5, 16291.0], [69.6, 16320.0], [69.7, 16326.0], [69.8, 16364.0], [69.9, 16376.0], [70.0, 16394.0], [70.1, 16395.0], [70.2, 16403.0], [70.3, 16420.0], [70.4, 16433.0], [70.5, 16440.0], [70.6, 16452.0], [70.7, 16454.0], [70.8, 16457.0], [70.9, 16467.0], [71.0, 16469.0], [71.1, 16481.0], [71.2, 16501.0], [71.3, 16522.0], [71.4, 16533.0], [71.5, 16544.0], [71.6, 16559.0], [71.7, 16579.0], [71.8, 16590.0], [71.9, 16596.0], [72.0, 16631.0], [72.1, 16643.0], [72.2, 16658.0], [72.3, 16682.0], [72.4, 16689.0], [72.5, 16702.0], [72.6, 16706.0], [72.7, 16741.0], [72.8, 16747.0], [72.9, 16758.0], [73.0, 16772.0], [73.1, 16783.0], [73.2, 16805.0], [73.3, 16814.0], [73.4, 16827.0], [73.5, 16846.0], [73.6, 16880.0], [73.7, 16898.0], [73.8, 16900.0], [73.9, 16949.0], [74.0, 16967.0], [74.1, 16969.0], [74.2, 16974.0], [74.3, 16989.0], [74.4, 16997.0], [74.5, 17003.0], [74.6, 17008.0], [74.7, 17013.0], [74.8, 17017.0], [74.9, 17063.0], [75.0, 17070.0], [75.1, 17078.0], [75.2, 17097.0], [75.3, 17104.0], [75.4, 17121.0], [75.5, 17144.0], [75.6, 17150.0], [75.7, 17164.0], [75.8, 17183.0], [75.9, 17187.0], [76.0, 17192.0], [76.1, 17278.0], [76.2, 17302.0], [76.3, 17329.0], [76.4, 17338.0], [76.5, 17346.0], [76.6, 17357.0], [76.7, 17377.0], [76.8, 17418.0], [76.9, 17426.0], [77.0, 17450.0], [77.1, 17502.0], [77.2, 17530.0], [77.3, 17534.0], [77.4, 17545.0], [77.5, 17570.0], [77.6, 17599.0], [77.7, 17633.0], [77.8, 17658.0], [77.9, 17670.0], [78.0, 17676.0], [78.1, 17685.0], [78.2, 17694.0], [78.3, 17701.0], [78.4, 17750.0], [78.5, 17789.0], [78.6, 17825.0], [78.7, 17838.0], [78.8, 17863.0], [78.9, 17872.0], [79.0, 17882.0], [79.1, 17912.0], [79.2, 17917.0], [79.3, 17927.0], [79.4, 17938.0], [79.5, 17964.0], [79.6, 17979.0], [79.7, 17984.0], [79.8, 18014.0], [79.9, 18029.0], [80.0, 18033.0], [80.1, 18058.0], [80.2, 18088.0], [80.3, 18111.0], [80.4, 18125.0], [80.5, 18141.0], [80.6, 18171.0], [80.7, 18176.0], [80.8, 18217.0], [80.9, 18225.0], [81.0, 18263.0], [81.1, 18355.0], [81.2, 18400.0], [81.3, 18410.0], [81.4, 18438.0], [81.5, 18493.0], [81.6, 18547.0], [81.7, 18553.0], [81.8, 18581.0], [81.9, 18595.0], [82.0, 18646.0], [82.1, 18668.0], [82.2, 18742.0], [82.3, 18817.0], [82.4, 18832.0], [82.5, 18845.0], [82.6, 18886.0], [82.7, 18901.0], [82.8, 18907.0], [82.9, 18944.0], [83.0, 18955.0], [83.1, 18973.0], [83.2, 19035.0], [83.3, 19055.0], [83.4, 19064.0], [83.5, 19072.0], [83.6, 19085.0], [83.7, 19102.0], [83.8, 19149.0], [83.9, 19182.0], [84.0, 19195.0], [84.1, 19218.0], [84.2, 19257.0], [84.3, 19308.0], [84.4, 19326.0], [84.5, 19338.0], [84.6, 19351.0], [84.7, 19385.0], [84.8, 19401.0], [84.9, 19418.0], [85.0, 19434.0], [85.1, 19446.0], [85.2, 19530.0], [85.3, 19541.0], [85.4, 19602.0], [85.5, 19612.0], [85.6, 19645.0], [85.7, 19717.0], [85.8, 19744.0], [85.9, 19775.0], [86.0, 19826.0], [86.1, 19880.0], [86.2, 19904.0], [86.3, 19921.0], [86.4, 19946.0], [86.5, 19960.0], [86.6, 19975.0], [86.7, 20002.0], [86.8, 20008.0], [86.9, 20025.0], [87.0, 20062.0], [87.1, 20074.0], [87.2, 20098.0], [87.3, 20121.0], [87.4, 20130.0], [87.5, 20153.0], [87.6, 20190.0], [87.7, 20210.0], [87.8, 20233.0], [87.9, 20256.0], [88.0, 20266.0], [88.1, 20315.0], [88.2, 20354.0], [88.3, 20404.0], [88.4, 20418.0], [88.5, 20427.0], [88.6, 20442.0], [88.7, 20474.0], [88.8, 20520.0], [88.9, 20540.0], [89.0, 20555.0], [89.1, 20601.0], [89.2, 20606.0], [89.3, 20651.0], [89.4, 20684.0], [89.5, 20729.0], [89.6, 20825.0], [89.7, 20889.0], [89.8, 20935.0], [89.9, 20945.0], [90.0, 20961.0], [90.1, 21018.0], [90.2, 21035.0], [90.3, 21099.0], [90.4, 21137.0], [90.5, 21223.0], [90.6, 21271.0], [90.7, 21285.0], [90.8, 21299.0], [90.9, 21341.0], [91.0, 21381.0], [91.1, 21404.0], [91.2, 21478.0], [91.3, 21491.0], [91.4, 21557.0], [91.5, 21600.0], [91.6, 21647.0], [91.7, 21699.0], [91.8, 21742.0], [91.9, 21797.0], [92.0, 21851.0], [92.1, 21877.0], [92.2, 21910.0], [92.3, 21937.0], [92.4, 22028.0], [92.5, 22052.0], [92.6, 22058.0], [92.7, 22139.0], [92.8, 22236.0], [92.9, 22256.0], [93.0, 22291.0], [93.1, 22302.0], [93.2, 22305.0], [93.3, 22348.0], [93.4, 22402.0], [93.5, 22515.0], [93.6, 22559.0], [93.7, 22614.0], [93.8, 22736.0], [93.9, 22867.0], [94.0, 22925.0], [94.1, 22976.0], [94.2, 23021.0], [94.3, 23046.0], [94.4, 23081.0], [94.5, 23098.0], [94.6, 23108.0], [94.7, 23193.0], [94.8, 23277.0], [94.9, 23371.0], [95.0, 23380.0], [95.1, 23422.0], [95.2, 23482.0], [95.3, 23488.0], [95.4, 23614.0], [95.5, 23663.0], [95.6, 23774.0], [95.7, 23826.0], [95.8, 23850.0], [95.9, 23897.0], [96.0, 24043.0], [96.1, 24066.0], [96.2, 24155.0], [96.3, 24229.0], [96.4, 24352.0], [96.5, 24365.0], [96.6, 24469.0], [96.7, 24522.0], [96.8, 24558.0], [96.9, 24571.0], [97.0, 24615.0], [97.1, 24741.0], [97.2, 24829.0], [97.3, 24882.0], [97.4, 24944.0], [97.5, 25109.0], [97.6, 25191.0], [97.7, 25439.0], [97.8, 25500.0], [97.9, 25555.0], [98.0, 25906.0], [98.1, 25970.0], [98.2, 26089.0], [98.3, 26515.0], [98.4, 26589.0], [98.5, 26738.0], [98.6, 26777.0], [98.7, 27034.0], [98.8, 27136.0], [98.9, 27481.0], [99.0, 27604.0], [99.1, 27845.0], [99.2, 28131.0], [99.3, 28397.0], [99.4, 28707.0], [99.5, 29132.0], [99.6, 29814.0], [99.7, 30242.0], [99.8, 31140.0], [99.9, 33002.0]], "isOverall": false, "label": "Component Referennce", "isController": false}, {"data": [[0.0, 380.0], [0.1, 380.0], [0.2, 384.0], [0.3, 400.0], [0.4, 408.0], [0.5, 412.0], [0.6, 413.0], [0.7, 413.0], [0.8, 413.0], [0.9, 414.0], [1.0, 414.0], [1.1, 414.0], [1.2, 415.0], [1.3, 415.0], [1.4, 415.0], [1.5, 416.0], [1.6, 416.0], [1.7, 416.0], [1.8, 417.0], [1.9, 417.0], [2.0, 420.0], [2.1, 421.0], [2.2, 424.0], [2.3, 428.0], [2.4, 430.0], [2.5, 431.0], [2.6, 432.0], [2.7, 432.0], [2.8, 432.0], [2.9, 433.0], [3.0, 433.0], [3.1, 434.0], [3.2, 436.0], [3.3, 436.0], [3.4, 436.0], [3.5, 437.0], [3.6, 437.0], [3.7, 437.0], [3.8, 438.0], [3.9, 439.0], [4.0, 439.0], [4.1, 440.0], [4.2, 442.0], [4.3, 442.0], [4.4, 443.0], [4.5, 444.0], [4.6, 446.0], [4.7, 449.0], [4.8, 451.0], [4.9, 454.0], [5.0, 454.0], [5.1, 455.0], [5.2, 455.0], [5.3, 456.0], [5.4, 456.0], [5.5, 456.0], [5.6, 457.0], [5.7, 458.0], [5.8, 459.0], [5.9, 460.0], [6.0, 461.0], [6.1, 463.0], [6.2, 464.0], [6.3, 465.0], [6.4, 467.0], [6.5, 467.0], [6.6, 468.0], [6.7, 469.0], [6.8, 470.0], [6.9, 470.0], [7.0, 471.0], [7.1, 471.0], [7.2, 471.0], [7.3, 472.0], [7.4, 472.0], [7.5, 474.0], [7.6, 474.0], [7.7, 474.0], [7.8, 474.0], [7.9, 474.0], [8.0, 475.0], [8.1, 476.0], [8.2, 476.0], [8.3, 476.0], [8.4, 477.0], [8.5, 478.0], [8.6, 478.0], [8.7, 478.0], [8.8, 479.0], [8.9, 480.0], [9.0, 481.0], [9.1, 481.0], [9.2, 482.0], [9.3, 482.0], [9.4, 482.0], [9.5, 482.0], [9.6, 483.0], [9.7, 483.0], [9.8, 483.0], [9.9, 484.0], [10.0, 484.0], [10.1, 484.0], [10.2, 485.0], [10.3, 485.0], [10.4, 485.0], [10.5, 486.0], [10.6, 486.0], [10.7, 487.0], [10.8, 487.0], [10.9, 487.0], [11.0, 488.0], [11.1, 488.0], [11.2, 488.0], [11.3, 489.0], [11.4, 490.0], [11.5, 490.0], [11.6, 491.0], [11.7, 491.0], [11.8, 491.0], [11.9, 492.0], [12.0, 492.0], [12.1, 492.0], [12.2, 492.0], [12.3, 493.0], [12.4, 493.0], [12.5, 493.0], [12.6, 494.0], [12.7, 494.0], [12.8, 494.0], [12.9, 494.0], [13.0, 494.0], [13.1, 495.0], [13.2, 495.0], [13.3, 495.0], [13.4, 495.0], [13.5, 495.0], [13.6, 496.0], [13.7, 496.0], [13.8, 496.0], [13.9, 496.0], [14.0, 496.0], [14.1, 496.0], [14.2, 496.0], [14.3, 496.0], [14.4, 497.0], [14.5, 497.0], [14.6, 497.0], [14.7, 497.0], [14.8, 497.0], [14.9, 497.0], [15.0, 498.0], [15.1, 498.0], [15.2, 498.0], [15.3, 498.0], [15.4, 498.0], [15.5, 498.0], [15.6, 499.0], [15.7, 499.0], [15.8, 499.0], [15.9, 499.0], [16.0, 499.0], [16.1, 499.0], [16.2, 499.0], [16.3, 499.0], [16.4, 499.0], [16.5, 500.0], [16.6, 500.0], [16.7, 500.0], [16.8, 500.0], [16.9, 501.0], [17.0, 501.0], [17.1, 501.0], [17.2, 501.0], [17.3, 501.0], [17.4, 501.0], [17.5, 502.0], [17.6, 502.0], [17.7, 502.0], [17.8, 502.0], [17.9, 502.0], [18.0, 502.0], [18.1, 503.0], [18.2, 503.0], [18.3, 503.0], [18.4, 503.0], [18.5, 503.0], [18.6, 503.0], [18.7, 503.0], [18.8, 503.0], [18.9, 503.0], [19.0, 504.0], [19.1, 504.0], [19.2, 504.0], [19.3, 504.0], [19.4, 504.0], [19.5, 504.0], [19.6, 504.0], [19.7, 504.0], [19.8, 505.0], [19.9, 505.0], [20.0, 505.0], [20.1, 505.0], [20.2, 505.0], [20.3, 505.0], [20.4, 505.0], [20.5, 505.0], [20.6, 505.0], [20.7, 505.0], [20.8, 505.0], [20.9, 505.0], [21.0, 505.0], [21.1, 505.0], [21.2, 505.0], [21.3, 506.0], [21.4, 506.0], [21.5, 506.0], [21.6, 506.0], [21.7, 506.0], [21.8, 506.0], [21.9, 506.0], [22.0, 506.0], [22.1, 506.0], [22.2, 506.0], [22.3, 506.0], [22.4, 506.0], [22.5, 506.0], [22.6, 506.0], [22.7, 507.0], [22.8, 507.0], [22.9, 507.0], [23.0, 507.0], [23.1, 507.0], [23.2, 507.0], [23.3, 507.0], [23.4, 507.0], [23.5, 507.0], [23.6, 507.0], [23.7, 507.0], [23.8, 507.0], [23.9, 507.0], [24.0, 508.0], [24.1, 508.0], [24.2, 508.0], [24.3, 508.0], [24.4, 508.0], [24.5, 508.0], [24.6, 508.0], [24.7, 508.0], [24.8, 508.0], [24.9, 508.0], [25.0, 508.0], [25.1, 508.0], [25.2, 508.0], [25.3, 508.0], [25.4, 508.0], [25.5, 508.0], [25.6, 509.0], [25.7, 509.0], [25.8, 509.0], [25.9, 509.0], [26.0, 509.0], [26.1, 509.0], [26.2, 509.0], [26.3, 509.0], [26.4, 509.0], [26.5, 509.0], [26.6, 509.0], [26.7, 509.0], [26.8, 509.0], [26.9, 509.0], [27.0, 509.0], [27.1, 509.0], [27.2, 509.0], [27.3, 510.0], [27.4, 510.0], [27.5, 510.0], [27.6, 510.0], [27.7, 510.0], [27.8, 510.0], [27.9, 510.0], [28.0, 510.0], [28.1, 510.0], [28.2, 510.0], [28.3, 510.0], [28.4, 510.0], [28.5, 510.0], [28.6, 510.0], [28.7, 510.0], [28.8, 511.0], [28.9, 511.0], [29.0, 511.0], [29.1, 511.0], [29.2, 511.0], [29.3, 511.0], [29.4, 511.0], [29.5, 511.0], [29.6, 511.0], [29.7, 511.0], [29.8, 511.0], [29.9, 511.0], [30.0, 511.0], [30.1, 511.0], [30.2, 511.0], [30.3, 511.0], [30.4, 511.0], [30.5, 511.0], [30.6, 511.0], [30.7, 512.0], [30.8, 512.0], [30.9, 512.0], [31.0, 512.0], [31.1, 512.0], [31.2, 512.0], [31.3, 512.0], [31.4, 512.0], [31.5, 512.0], [31.6, 512.0], [31.7, 512.0], [31.8, 512.0], [31.9, 512.0], [32.0, 512.0], [32.1, 512.0], [32.2, 513.0], [32.3, 513.0], [32.4, 513.0], [32.5, 513.0], [32.6, 513.0], [32.7, 513.0], [32.8, 513.0], [32.9, 513.0], [33.0, 513.0], [33.1, 513.0], [33.2, 513.0], [33.3, 513.0], [33.4, 513.0], [33.5, 513.0], [33.6, 513.0], [33.7, 513.0], [33.8, 513.0], [33.9, 513.0], [34.0, 513.0], [34.1, 513.0], [34.2, 513.0], [34.3, 513.0], [34.4, 513.0], [34.5, 514.0], [34.6, 514.0], [34.7, 514.0], [34.8, 514.0], [34.9, 514.0], [35.0, 514.0], [35.1, 514.0], [35.2, 514.0], [35.3, 514.0], [35.4, 514.0], [35.5, 514.0], [35.6, 514.0], [35.7, 514.0], [35.8, 514.0], [35.9, 514.0], [36.0, 514.0], [36.1, 514.0], [36.2, 514.0], [36.3, 514.0], [36.4, 514.0], [36.5, 514.0], [36.6, 514.0], [36.7, 514.0], [36.8, 514.0], [36.9, 515.0], [37.0, 515.0], [37.1, 515.0], [37.2, 515.0], [37.3, 515.0], [37.4, 515.0], [37.5, 515.0], [37.6, 515.0], [37.7, 515.0], [37.8, 515.0], [37.9, 515.0], [38.0, 515.0], [38.1, 515.0], [38.2, 515.0], [38.3, 515.0], [38.4, 515.0], [38.5, 515.0], [38.6, 515.0], [38.7, 515.0], [38.8, 515.0], [38.9, 515.0], [39.0, 515.0], [39.1, 515.0], [39.2, 515.0], [39.3, 515.0], [39.4, 515.0], [39.5, 516.0], [39.6, 516.0], [39.7, 516.0], [39.8, 516.0], [39.9, 516.0], [40.0, 516.0], [40.1, 516.0], [40.2, 516.0], [40.3, 516.0], [40.4, 516.0], [40.5, 516.0], [40.6, 516.0], [40.7, 516.0], [40.8, 516.0], [40.9, 516.0], [41.0, 516.0], [41.1, 516.0], [41.2, 516.0], [41.3, 516.0], [41.4, 516.0], [41.5, 516.0], [41.6, 516.0], [41.7, 516.0], [41.8, 516.0], [41.9, 516.0], [42.0, 516.0], [42.1, 517.0], [42.2, 517.0], [42.3, 517.0], [42.4, 517.0], [42.5, 517.0], [42.6, 517.0], [42.7, 517.0], [42.8, 517.0], [42.9, 517.0], [43.0, 517.0], [43.1, 517.0], [43.2, 517.0], [43.3, 517.0], [43.4, 517.0], [43.5, 517.0], [43.6, 517.0], [43.7, 517.0], [43.8, 517.0], [43.9, 517.0], [44.0, 517.0], [44.1, 517.0], [44.2, 517.0], [44.3, 517.0], [44.4, 517.0], [44.5, 517.0], [44.6, 517.0], [44.7, 517.0], [44.8, 517.0], [44.9, 517.0], [45.0, 517.0], [45.1, 517.0], [45.2, 518.0], [45.3, 518.0], [45.4, 518.0], [45.5, 518.0], [45.6, 518.0], [45.7, 518.0], [45.8, 518.0], [45.9, 518.0], [46.0, 518.0], [46.1, 518.0], [46.2, 518.0], [46.3, 518.0], [46.4, 518.0], [46.5, 518.0], [46.6, 518.0], [46.7, 518.0], [46.8, 518.0], [46.9, 518.0], [47.0, 518.0], [47.1, 518.0], [47.2, 518.0], [47.3, 518.0], [47.4, 518.0], [47.5, 518.0], [47.6, 518.0], [47.7, 518.0], [47.8, 518.0], [47.9, 519.0], [48.0, 519.0], [48.1, 519.0], [48.2, 519.0], [48.3, 519.0], [48.4, 519.0], [48.5, 519.0], [48.6, 519.0], [48.7, 519.0], [48.8, 519.0], [48.9, 519.0], [49.0, 519.0], [49.1, 519.0], [49.2, 519.0], [49.3, 519.0], [49.4, 519.0], [49.5, 519.0], [49.6, 519.0], [49.7, 519.0], [49.8, 519.0], [49.9, 520.0], [50.0, 520.0], [50.1, 520.0], [50.2, 520.0], [50.3, 520.0], [50.4, 520.0], [50.5, 520.0], [50.6, 520.0], [50.7, 520.0], [50.8, 520.0], [50.9, 520.0], [51.0, 520.0], [51.1, 520.0], [51.2, 520.0], [51.3, 520.0], [51.4, 520.0], [51.5, 520.0], [51.6, 520.0], [51.7, 520.0], [51.8, 520.0], [51.9, 520.0], [52.0, 520.0], [52.1, 520.0], [52.2, 520.0], [52.3, 520.0], [52.4, 521.0], [52.5, 521.0], [52.6, 521.0], [52.7, 521.0], [52.8, 521.0], [52.9, 521.0], [53.0, 521.0], [53.1, 521.0], [53.2, 521.0], [53.3, 521.0], [53.4, 521.0], [53.5, 521.0], [53.6, 521.0], [53.7, 521.0], [53.8, 521.0], [53.9, 521.0], [54.0, 522.0], [54.1, 522.0], [54.2, 522.0], [54.3, 522.0], [54.4, 522.0], [54.5, 522.0], [54.6, 522.0], [54.7, 522.0], [54.8, 522.0], [54.9, 522.0], [55.0, 522.0], [55.1, 522.0], [55.2, 522.0], [55.3, 522.0], [55.4, 522.0], [55.5, 522.0], [55.6, 523.0], [55.7, 523.0], [55.8, 523.0], [55.9, 523.0], [56.0, 523.0], [56.1, 523.0], [56.2, 523.0], [56.3, 523.0], [56.4, 523.0], [56.5, 523.0], [56.6, 524.0], [56.7, 524.0], [56.8, 524.0], [56.9, 524.0], [57.0, 524.0], [57.1, 524.0], [57.2, 524.0], [57.3, 524.0], [57.4, 524.0], [57.5, 524.0], [57.6, 524.0], [57.7, 524.0], [57.8, 524.0], [57.9, 525.0], [58.0, 525.0], [58.1, 525.0], [58.2, 525.0], [58.3, 525.0], [58.4, 525.0], [58.5, 525.0], [58.6, 525.0], [58.7, 525.0], [58.8, 525.0], [58.9, 525.0], [59.0, 525.0], [59.1, 525.0], [59.2, 526.0], [59.3, 526.0], [59.4, 526.0], [59.5, 526.0], [59.6, 526.0], [59.7, 526.0], [59.8, 526.0], [59.9, 526.0], [60.0, 526.0], [60.1, 526.0], [60.2, 526.0], [60.3, 526.0], [60.4, 526.0], [60.5, 526.0], [60.6, 526.0], [60.7, 527.0], [60.8, 527.0], [60.9, 527.0], [61.0, 527.0], [61.1, 527.0], [61.2, 527.0], [61.3, 527.0], [61.4, 527.0], [61.5, 527.0], [61.6, 527.0], [61.7, 528.0], [61.8, 528.0], [61.9, 528.0], [62.0, 528.0], [62.1, 528.0], [62.2, 528.0], [62.3, 528.0], [62.4, 528.0], [62.5, 528.0], [62.6, 528.0], [62.7, 529.0], [62.8, 529.0], [62.9, 529.0], [63.0, 529.0], [63.1, 529.0], [63.2, 529.0], [63.3, 529.0], [63.4, 529.0], [63.5, 529.0], [63.6, 529.0], [63.7, 529.0], [63.8, 529.0], [63.9, 529.0], [64.0, 530.0], [64.1, 530.0], [64.2, 530.0], [64.3, 530.0], [64.4, 530.0], [64.5, 530.0], [64.6, 530.0], [64.7, 530.0], [64.8, 530.0], [64.9, 530.0], [65.0, 530.0], [65.1, 530.0], [65.2, 530.0], [65.3, 530.0], [65.4, 531.0], [65.5, 531.0], [65.6, 531.0], [65.7, 531.0], [65.8, 531.0], [65.9, 531.0], [66.0, 531.0], [66.1, 531.0], [66.2, 531.0], [66.3, 531.0], [66.4, 531.0], [66.5, 531.0], [66.6, 531.0], [66.7, 531.0], [66.8, 531.0], [66.9, 531.0], [67.0, 531.0], [67.1, 532.0], [67.2, 532.0], [67.3, 532.0], [67.4, 532.0], [67.5, 532.0], [67.6, 532.0], [67.7, 532.0], [67.8, 532.0], [67.9, 532.0], [68.0, 532.0], [68.1, 532.0], [68.2, 532.0], [68.3, 532.0], [68.4, 532.0], [68.5, 532.0], [68.6, 532.0], [68.7, 532.0], [68.8, 532.0], [68.9, 533.0], [69.0, 533.0], [69.1, 533.0], [69.2, 533.0], [69.3, 533.0], [69.4, 533.0], [69.5, 533.0], [69.6, 533.0], [69.7, 533.0], [69.8, 533.0], [69.9, 533.0], [70.0, 533.0], [70.1, 533.0], [70.2, 533.0], [70.3, 533.0], [70.4, 533.0], [70.5, 533.0], [70.6, 533.0], [70.7, 534.0], [70.8, 534.0], [70.9, 534.0], [71.0, 534.0], [71.1, 534.0], [71.2, 534.0], [71.3, 534.0], [71.4, 534.0], [71.5, 534.0], [71.6, 534.0], [71.7, 534.0], [71.8, 534.0], [71.9, 535.0], [72.0, 535.0], [72.1, 535.0], [72.2, 535.0], [72.3, 535.0], [72.4, 535.0], [72.5, 535.0], [72.6, 535.0], [72.7, 535.0], [72.8, 535.0], [72.9, 535.0], [73.0, 535.0], [73.1, 535.0], [73.2, 535.0], [73.3, 535.0], [73.4, 535.0], [73.5, 535.0], [73.6, 536.0], [73.7, 536.0], [73.8, 536.0], [73.9, 536.0], [74.0, 536.0], [74.1, 536.0], [74.2, 536.0], [74.3, 536.0], [74.4, 536.0], [74.5, 536.0], [74.6, 536.0], [74.7, 536.0], [74.8, 536.0], [74.9, 536.0], [75.0, 536.0], [75.1, 537.0], [75.2, 537.0], [75.3, 537.0], [75.4, 537.0], [75.5, 537.0], [75.6, 537.0], [75.7, 537.0], [75.8, 537.0], [75.9, 537.0], [76.0, 537.0], [76.1, 537.0], [76.2, 538.0], [76.3, 538.0], [76.4, 538.0], [76.5, 538.0], [76.6, 538.0], [76.7, 538.0], [76.8, 538.0], [76.9, 538.0], [77.0, 538.0], [77.1, 538.0], [77.2, 539.0], [77.3, 539.0], [77.4, 539.0], [77.5, 539.0], [77.6, 539.0], [77.7, 539.0], [77.8, 539.0], [77.9, 539.0], [78.0, 539.0], [78.1, 540.0], [78.2, 540.0], [78.3, 540.0], [78.4, 540.0], [78.5, 540.0], [78.6, 540.0], [78.7, 540.0], [78.8, 540.0], [78.9, 540.0], [79.0, 541.0], [79.1, 541.0], [79.2, 541.0], [79.3, 541.0], [79.4, 541.0], [79.5, 541.0], [79.6, 542.0], [79.7, 542.0], [79.8, 542.0], [79.9, 542.0], [80.0, 543.0], [80.1, 543.0], [80.2, 543.0], [80.3, 544.0], [80.4, 544.0], [80.5, 544.0], [80.6, 545.0], [80.7, 545.0], [80.8, 545.0], [80.9, 546.0], [81.0, 546.0], [81.1, 547.0], [81.2, 547.0], [81.3, 548.0], [81.4, 548.0], [81.5, 549.0], [81.6, 549.0], [81.7, 549.0], [81.8, 550.0], [81.9, 553.0], [82.0, 555.0], [82.1, 556.0], [82.2, 557.0], [82.3, 558.0], [82.4, 561.0], [82.5, 562.0], [82.6, 564.0], [82.7, 565.0], [82.8, 565.0], [82.9, 567.0], [83.0, 571.0], [83.1, 580.0], [83.2, 581.0], [83.3, 583.0], [83.4, 587.0], [83.5, 587.0], [83.6, 594.0], [83.7, 598.0], [83.8, 600.0], [83.9, 604.0], [84.0, 605.0], [84.1, 607.0], [84.2, 608.0], [84.3, 647.0], [84.4, 660.0], [84.5, 678.0], [84.6, 694.0], [84.7, 721.0], [84.8, 723.0], [84.9, 729.0], [85.0, 738.0], [85.1, 739.0], [85.2, 765.0], [85.3, 772.0], [85.4, 781.0], [85.5, 789.0], [85.6, 790.0], [85.7, 793.0], [85.8, 799.0], [85.9, 802.0], [86.0, 810.0], [86.1, 818.0], [86.2, 819.0], [86.3, 820.0], [86.4, 821.0], [86.5, 823.0], [86.6, 823.0], [86.7, 824.0], [86.8, 826.0], [86.9, 827.0], [87.0, 828.0], [87.1, 829.0], [87.2, 832.0], [87.3, 834.0], [87.4, 836.0], [87.5, 838.0], [87.6, 840.0], [87.7, 842.0], [87.8, 846.0], [87.9, 848.0], [88.0, 852.0], [88.1, 859.0], [88.2, 863.0], [88.3, 866.0], [88.4, 889.0], [88.5, 940.0], [88.6, 950.0], [88.7, 964.0], [88.8, 973.0], [88.9, 977.0], [89.0, 979.0], [89.1, 984.0], [89.2, 994.0], [89.3, 1007.0], [89.4, 1008.0], [89.5, 1009.0], [89.6, 1010.0], [89.7, 1011.0], [89.8, 1012.0], [89.9, 1013.0], [90.0, 1014.0], [90.1, 1015.0], [90.2, 1017.0], [90.3, 1020.0], [90.4, 1020.0], [90.5, 1021.0], [90.6, 1022.0], [90.7, 1026.0], [90.8, 1027.0], [90.9, 1027.0], [91.0, 1029.0], [91.1, 1030.0], [91.2, 1033.0], [91.3, 1035.0], [91.4, 1042.0], [91.5, 1046.0], [91.6, 1050.0], [91.7, 1054.0], [91.8, 1055.0], [91.9, 1056.0], [92.0, 1056.0], [92.1, 1058.0], [92.2, 1062.0], [92.3, 1063.0], [92.4, 1064.0], [92.5, 1070.0], [92.6, 1220.0], [92.7, 1266.0], [92.8, 1294.0], [92.9, 1330.0], [93.0, 1334.0], [93.1, 1355.0], [93.2, 1370.0], [93.3, 1373.0], [93.4, 1389.0], [93.5, 1486.0], [93.6, 1502.0], [93.7, 1505.0], [93.8, 1507.0], [93.9, 1514.0], [94.0, 1520.0], [94.1, 1523.0], [94.2, 1531.0], [94.3, 1532.0], [94.4, 1535.0], [94.5, 1549.0], [94.6, 1551.0], [94.7, 1564.0], [94.8, 1570.0], [94.9, 1594.0], [95.0, 1637.0], [95.1, 1642.0], [95.2, 1653.0], [95.3, 1714.0], [95.4, 1728.0], [95.5, 1746.0], [95.6, 1752.0], [95.7, 1770.0], [95.8, 1776.0], [95.9, 1782.0], [96.0, 1793.0], [96.1, 1800.0], [96.2, 1807.0], [96.3, 1814.0], [96.4, 1825.0], [96.5, 1859.0], [96.6, 1878.0], [96.7, 1889.0], [96.8, 1892.0], [96.9, 1897.0], [97.0, 1912.0], [97.1, 1927.0], [97.2, 1998.0], [97.3, 2014.0], [97.4, 2017.0], [97.5, 2025.0], [97.6, 2028.0], [97.7, 2032.0], [97.8, 2034.0], [97.9, 2035.0], [98.0, 2041.0], [98.1, 2046.0], [98.2, 2047.0], [98.3, 2050.0], [98.4, 2088.0], [98.5, 2093.0], [98.6, 2110.0], [98.7, 2118.0], [98.8, 2134.0], [98.9, 2257.0], [99.0, 2282.0], [99.1, 2301.0], [99.2, 2334.0], [99.3, 2366.0], [99.4, 2378.0], [99.5, 2514.0], [99.6, 2643.0], [99.7, 3078.0], [99.8, 3179.0], [99.9, 3370.0]], "isOverall": false, "label": "Home Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"), function(series){
                series.curvedLines = {apply: true, tension: 1};
                series.threshold = {
                        below: percentileThreshold,
                        color: $("#slider-vertical").children("div").css("background-color")
                };
            });
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1456.0, "series": [{"data": [[0.0, 6.0], [2500.0, 36.0], [1500.0, 255.0], [3000.0, 15.0], [6000.0, 1.0], [3500.0, 11.0], [500.0, 526.0], [1000.0, 1046.0], [2000.0, 102.0], [4000.0, 2.0]], "isOverall": false, "label": "Get Started", "isController": false}, {"data": [[2500.0, 5.0], [3000.0, 5.0], [3500.0, 6.0], [4000.0, 20.0], [4500.0, 16.0], [5000.0, 18.0], [5500.0, 22.0], [6000.0, 19.0], [6500.0, 24.0], [7000.0, 29.0], [7500.0, 29.0], [8000.0, 40.0], [8500.0, 44.0], [9000.0, 41.0], [9500.0, 42.0], [10000.0, 71.0], [10500.0, 71.0], [11000.0, 78.0], [11500.0, 103.0], [12000.0, 84.0], [12500.0, 84.0], [13000.0, 88.0], [13500.0, 82.0], [14000.0, 87.0], [14500.0, 82.0], [15000.0, 76.0], [15500.0, 71.0], [16000.0, 87.0], [16500.0, 65.0], [17000.0, 53.0], [17500.0, 53.0], [18000.0, 37.0], [18500.0, 31.0], [19000.0, 41.0], [20000.0, 41.0], [19500.0, 30.0], [20500.0, 27.0], [21000.0, 25.0], [21500.0, 20.0], [22000.0, 23.0], [22500.0, 14.0], [23500.0, 13.0], [23000.0, 23.0], [24500.0, 15.0], [24000.0, 14.0], [25000.0, 7.0], [25500.0, 8.0], [26500.0, 8.0], [26000.0, 2.0], [27000.0, 6.0], [27500.0, 3.0], [28000.0, 4.0], [28500.0, 3.0], [29000.0, 2.0], [29500.0, 1.0], [30000.0, 2.0], [30500.0, 1.0], [31500.0, 1.0], [31000.0, 1.0], [33000.0, 1.0], [33500.0, 1.0]], "isOverall": false, "label": "Component Referennce", "isController": false}, {"data": [[0.0, 330.0], [2500.0, 4.0], [1500.0, 73.0], [3000.0, 6.0], [500.0, 1456.0], [1000.0, 86.0], [2000.0, 45.0]], "isOverall": false, "label": "Home Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 500, "maxX": 33500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 149.18663194444474, "minX": 1.47695514E12, "maxY": 200.0, "series": [{"data": [[1.4769552E12, 200.0], [1.47695526E12, 199.80596308566015], [1.47695514E12, 185.41698841698854], [1.47695532E12, 149.18663194444474]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.47695532E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 412.6, "minX": 1.0, "maxY": 24066.0, "series": [{"data": [[10.0, 501.0], [11.0, 504.0], [18.0, 503.0], [23.0, 503.0], [24.0, 538.0], [26.0, 530.0], [27.0, 506.0], [30.0, 820.0], [35.0, 656.0], [34.0, 668.5], [41.0, 760.0], [40.0, 659.0], [44.0, 1046.0], [46.0, 980.0], [48.0, 512.0], [56.0, 784.0], [62.0, 539.5], [75.0, 1072.0], [73.0, 734.0], [72.0, 736.0], [79.0, 747.3333333333334], [83.0, 638.0], [89.0, 1006.0], [92.0, 1021.25], [97.0, 681.3333333333334], [102.0, 770.5], [101.0, 887.0], [107.0, 496.0], [106.0, 781.0], [105.0, 1283.0], [111.0, 1137.0], [109.0, 1046.0], [112.0, 1031.5], [119.0, 999.0], [117.0, 508.5], [116.0, 524.0], [120.0, 758.0], [127.0, 805.0], [126.0, 912.5], [133.0, 1004.0], [132.0, 1004.0], [130.0, 874.0], [128.0, 1302.0], [143.0, 978.0], [141.0, 1009.5], [140.0, 1169.0], [139.0, 1004.0], [138.0, 1025.6666666666667], [137.0, 668.6666666666666], [150.0, 1172.6666666666667], [146.0, 1210.0], [145.0, 893.5], [144.0, 1278.0], [159.0, 1172.7142857142858], [158.0, 1439.0], [157.0, 1546.5], [155.0, 740.3333333333334], [154.0, 1131.0], [153.0, 825.0], [167.0, 1473.375], [166.0, 806.5], [165.0, 901.25], [164.0, 1130.0], [175.0, 955.3333333333333], [174.0, 1280.0], [172.0, 1000.4], [171.0, 1296.0], [169.0, 820.0], [168.0, 825.0], [182.0, 1236.0], [181.0, 1159.1666666666667], [180.0, 894.5], [179.0, 1232.684210526316], [178.0, 836.6666666666666], [177.0, 1075.5], [176.0, 1464.4444444444443], [191.0, 1479.4], [189.0, 963.1428571428572], [188.0, 1524.5], [187.0, 951.75], [186.0, 1114.75], [185.0, 1392.6666666666667], [184.0, 1176.0000000000002], [199.0, 1329.8514851485147], [198.0, 1177.8235294117646], [197.0, 1425.4705882352941], [196.0, 1244.6279069767443], [195.0, 1371.2], [194.0, 1980.0], [193.0, 1462.5384615384617], [192.0, 1010.0], [200.0, 1229.1083870967723]], "isOverall": false, "label": "Get Started", "isController": false}, {"data": [[192.987, 1218.1054999999978]], "isOverall": false, "label": "Get Started-Aggregated", "isController": false}, {"data": [[3.0, 2763.5], [4.0, 9263.0], [5.0, 7009.0], [6.0, 5058.0], [7.0, 4134.0], [8.0, 8221.0], [9.0, 7539.0], [10.0, 6769.0], [11.0, 5210.0], [12.0, 4409.0], [13.0, 2880.0], [14.0, 4354.0], [15.0, 5026.5], [16.0, 3732.0], [17.0, 4483.0], [18.0, 2755.0], [19.0, 5759.0], [20.0, 7788.0], [21.0, 2868.0], [22.0, 8566.0], [23.0, 5718.0], [24.0, 4488.0], [25.0, 4828.0], [26.0, 5337.333333333333], [27.0, 7305.0], [28.0, 10066.0], [29.0, 10561.0], [30.0, 4284.0], [31.0, 4783.0], [33.0, 8687.0], [32.0, 5722.0], [35.0, 5401.0], [34.0, 7772.0], [37.0, 4452.0], [36.0, 4686.0], [39.0, 9289.0], [38.0, 4540.0], [41.0, 6979.5], [40.0, 8661.0], [43.0, 7348.0], [42.0, 6483.0], [45.0, 5908.0], [44.0, 9497.5], [47.0, 10656.0], [46.0, 7373.5], [49.0, 4131.0], [48.0, 8012.5], [51.0, 24066.0], [50.0, 10878.0], [53.0, 12811.0], [52.0, 6492.0], [55.0, 10329.0], [54.0, 17122.0], [57.0, 11548.0], [56.0, 3527.0], [59.0, 12508.333333333334], [58.0, 13414.0], [61.0, 6777.0], [60.0, 11494.0], [63.0, 3090.0], [62.0, 7274.0], [67.0, 7005.0], [66.0, 4647.0], [65.0, 4468.0], [64.0, 11803.0], [71.0, 11473.0], [70.0, 8022.0], [69.0, 10468.0], [68.0, 9830.0], [75.0, 12686.0], [74.0, 4508.0], [73.0, 4485.0], [72.0, 8899.0], [79.0, 9546.0], [78.0, 7042.0], [77.0, 13878.0], [76.0, 11257.0], [83.0, 7525.0], [82.0, 5264.0], [81.0, 7476.0], [80.0, 11474.0], [87.0, 3960.0], [86.0, 21647.0], [85.0, 7667.0], [84.0, 12036.0], [91.0, 9728.0], [90.0, 5511.0], [89.0, 16717.5], [88.0, 11405.0], [95.0, 10123.0], [94.0, 12324.0], [93.0, 11102.0], [92.0, 11265.0], [99.0, 16615.0], [98.0, 10373.0], [97.0, 17269.0], [96.0, 12988.0], [103.0, 4499.0], [102.0, 8299.0], [101.0, 11811.0], [100.0, 4521.0], [107.0, 9986.0], [106.0, 14307.8], [105.0, 10659.5], [104.0, 12354.0], [111.0, 9284.0], [110.0, 15292.0], [109.0, 2776.0], [108.0, 5656.0], [115.0, 11128.5], [114.0, 14607.0], [113.0, 10274.5], [112.0, 14863.5], [119.0, 16772.0], [118.0, 12396.0], [117.0, 12919.0], [116.0, 8721.0], [123.0, 16320.0], [122.0, 12029.0], [121.0, 9663.0], [120.0, 10090.0], [127.0, 13074.5], [126.0, 13115.5], [125.0, 17949.0], [124.0, 15934.0], [135.0, 20474.0], [134.0, 14675.0], [133.0, 12028.0], [132.0, 15834.0], [131.0, 15721.0], [130.0, 15050.0], [129.0, 17183.0], [128.0, 15012.25], [143.0, 13342.166666666666], [142.0, 12285.0], [141.0, 15020.0], [140.0, 13311.0], [139.0, 8993.5], [138.0, 8393.666666666666], [137.0, 15486.5], [136.0, 12198.0], [151.0, 14989.0], [150.0, 12193.25], [149.0, 19102.0], [148.0, 15422.0], [147.0, 14156.0], [146.0, 14016.5], [145.0, 9492.0], [144.0, 17832.5], [159.0, 15319.222222222223], [158.0, 13480.166666666666], [157.0, 22428.75], [156.0, 14515.0], [155.0, 15486.333333333334], [154.0, 14976.0], [153.0, 19653.0], [152.0, 12993.0], [167.0, 14600.222222222224], [166.0, 15263.0], [165.0, 16871.0], [164.0, 17285.0], [163.0, 18646.0], [162.0, 9276.0], [161.0, 10023.0], [160.0, 21035.0], [175.0, 13264.999999999998], [174.0, 13961.0], [173.0, 16381.5], [172.0, 15317.75], [171.0, 16097.0], [170.0, 8881.0], [169.0, 12452.0], [168.0, 13332.75], [183.0, 21138.0], [182.0, 15040.833333333332], [181.0, 11497.25], [180.0, 16008.0], [179.0, 13424.849999999997], [178.0, 11530.333333333334], [177.0, 14162.75], [176.0, 14526.2], [191.0, 15358.857142857141], [190.0, 16291.0], [189.0, 16679.375], [188.0, 16140.666666666668], [187.0, 15198.333333333334], [186.0, 15184.857142857143], [185.0, 15379.0], [184.0, 13855.733333333332], [199.0, 15134.836734693876], [198.0, 15126.714285714288], [197.0, 15066.652173913044], [196.0, 14444.06818181818], [195.0, 17794.333333333332], [194.0, 9794.0], [193.0, 13286.7], [192.0, 9929.333333333334], [200.0, 14716.738751814219], [1.0, 10909.0]], "isOverall": false, "label": "Component Referennce", "isController": false}, {"data": [[183.95849999999982, 14246.751000000006]], "isOverall": false, "label": "Component Referennce-Aggregated", "isController": false}, {"data": [[11.0, 1000.5], [21.0, 1513.0], [24.0, 514.0], [26.0, 532.0], [30.0, 516.0], [35.0, 494.0], [36.0, 508.0], [40.0, 536.0], [45.0, 529.0], [44.0, 534.0], [48.0, 522.0], [50.0, 516.5], [54.0, 739.0], [71.0, 512.0], [73.0, 511.0], [72.0, 515.0], [83.0, 518.0], [82.0, 509.0], [85.0, 721.0], [84.0, 548.0], [92.0, 504.0], [103.0, 564.2857142857143], [102.0, 518.25], [101.0, 516.0], [104.0, 513.3846153846154], [105.0, 568.5333333333333], [106.0, 472.8], [107.0, 473.3333333333333], [109.0, 490.0], [111.0, 956.0], [112.0, 482.3333333333333], [113.0, 446.5], [115.0, 440.0], [114.0, 530.0], [118.0, 607.0], [119.0, 493.0], [120.0, 452.5], [121.0, 459.0], [123.0, 443.0], [122.0, 513.0], [124.0, 447.5], [125.0, 442.0], [126.0, 709.7142857142857], [127.0, 480.5], [129.0, 1234.0], [130.0, 443.0], [131.0, 481.0], [132.0, 464.0], [134.0, 439.0], [135.0, 445.0], [133.0, 1032.0], [128.0, 514.0], [136.0, 459.0], [137.0, 436.5], [139.0, 454.0], [143.0, 493.0], [141.0, 511.0], [140.0, 508.0], [138.0, 591.4285714285714], [146.0, 447.5], [147.0, 460.5], [149.0, 444.0], [151.0, 450.0], [150.0, 686.2], [145.0, 1746.0], [144.0, 472.5], [153.0, 641.3333333333334], [154.0, 435.5], [155.0, 436.0], [156.0, 474.0], [157.0, 421.5], [158.0, 412.6], [159.0, 432.2], [160.0, 416.5], [161.0, 464.0], [164.0, 512.0], [165.0, 439.75], [167.0, 478.3125], [166.0, 413.0], [163.0, 434.0], [162.0, 416.0], [170.0, 468.0], [172.0, 632.6666666666665], [173.0, 465.5], [174.0, 569.3333333333334], [175.0, 427.8333333333333], [171.0, 1639.0], [168.0, 431.0], [176.0, 439.6], [177.0, 907.8333333333334], [181.0, 627.2727272727273], [183.0, 501.5], [182.0, 527.3333333333334], [179.0, 550.4285714285716], [178.0, 415.0], [184.0, 702.1666666666666], [188.0, 576.1666666666666], [189.0, 524.4], [190.0, 490.0], [191.0, 536.2307692307693], [187.0, 655.75], [186.0, 582.1666666666666], [185.0, 804.2857142857143], [192.0, 496.5], [193.0, 693.5714285714287], [194.0, 1036.6], [195.0, 493.25], [197.0, 811.9545454545455], [198.0, 572.0], [199.0, 612.2199999999999], [196.0, 792.8888888888889], [200.0, 660.5514147688062]], "isOverall": false, "label": "Home Page", "isController": false}, {"data": [[189.80400000000014, 645.7739999999995]], "isOverall": false, "label": "Home Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.47695514E12, "maxY": 8905678.483333332, "series": [{"data": [[1.4769552E12, 0.0], [1.47695526E12, 0.0], [1.47695514E12, 0.0], [1.47695532E12, 0.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.4769552E12, 8905678.483333332], [1.47695526E12, 8480851.216666667], [1.47695514E12, 813276.95], [1.47695532E12, 5953635.616666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.47695532E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes/sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 547.8884297520664, "minX": 1.47695514E12, "maxY": 15160.735413839891, "series": [{"data": [[1.4769552E12, 1263.5739247311835], [1.47695526E12, 1248.3531914893613], [1.47695514E12, 1104.2477477477476], [1.47695532E12, 1127.2948328267476]], "isOverall": false, "label": "Get Started", "isController": false}, {"data": [[1.4769552E12, 15160.735413839891], [1.47695526E12, 14640.868945868944], [1.47695514E12, 10470.037037037036], [1.47695532E12, 12774.690335305713]], "isOverall": false, "label": "Component Referennce", "isController": false}, {"data": [[1.4769552E12, 659.0489130434793], [1.47695526E12, 664.4419263456087], [1.47695514E12, 547.8884297520664], [1.47695532E12, 648.1107594936708]], "isOverall": false, "label": "Home Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.47695532E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 260.1396396396396, "minX": 1.47695514E12, "maxY": 534.3583569405104, "series": [{"data": [[1.4769552E12, 282.25403225806457], [1.47695526E12, 275.95886524822686], [1.47695514E12, 260.1396396396396], [1.47695532E12, 264.051671732523]], "isOverall": false, "label": "Get Started", "isController": false}, {"data": [[1.4769552E12, 333.08005427408386], [1.47695526E12, 346.07264957264937], [1.47695514E12, 302.5185185185185], [1.47695532E12, 318.36291913214967]], "isOverall": false, "label": "Component Referennce", "isController": false}, {"data": [[1.4769552E12, 531.5611413043476], [1.47695526E12, 534.3583569405104], [1.47695514E12, 506.7066115702478], [1.47695532E12, 510.7025316455693]], "isOverall": false, "label": "Home Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.47695532E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 719.0, "minX": 518.0, "maxY": 1528.5, "series": [{"data": [[518.0, 719.0], [2113.0, 1067.0], [2217.0, 1095.0], [1152.0, 1528.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 2217.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time (ms)",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            }
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 265.0, "minX": 518.0, "maxY": 324.0, "series": [{"data": [[518.0, 324.0], [2113.0, 269.0], [2217.0, 269.0], [1152.0, 265.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 2217.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency (ms)",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            }
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 11.95, "minX": 1.47695514E12, "maxY": 36.96666666666667, "series": [{"data": [[1.4769552E12, 36.96666666666667], [1.47695526E12, 35.166666666666664], [1.47695514E12, 11.95], [1.47695532E12, 15.916666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.47695532E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 8.633333333333333, "minX": 1.47695514E12, "maxY": 36.95, "series": [{"data": [[1.4769552E12, 36.95], [1.47695526E12, 35.21666666666667], [1.47695514E12, 8.633333333333333], [1.47695532E12, 19.2]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.47695532E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses/sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.9, "minX": 1.47695514E12, "maxY": 12.4, "series": [{"data": [[1.4769552E12, 12.266666666666667], [1.47695526E12, 11.766666666666667], [1.47695514E12, 4.033333333333333], [1.47695532E12, 5.266666666666667]], "isOverall": false, "label": "Home Page-success", "isController": false}, {"data": [[1.4769552E12, 12.4], [1.47695526E12, 11.75], [1.47695514E12, 3.7], [1.47695532E12, 5.483333333333333]], "isOverall": false, "label": "Get Started-success", "isController": false}, {"data": [[1.4769552E12, 12.283333333333333], [1.47695526E12, 11.7], [1.47695514E12, 0.9], [1.47695532E12, 8.45]], "isOverall": false, "label": "Component Referennce-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.47695532E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#responseTimesOverTime";
        } else if (elem.id == "bodyLantenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

// Collapse
$(function() {
        $('.collapse').on('shown.bs.collapse', function(){
            collapse(this, false);
        }).on('hidden.bs.collapse', function(){
            collapse(this, true);
        });
});

$(function() {
    $(".glyphicon").mousedown( function(event){
        var tmp = $('.in:not(ul)');
        tmp.parent().parent().parent().find(".fa-chevron-up").removeClass("fa-chevron-down").addClass("fa-chevron-down");
        tmp.removeClass("in");
        tmp.addClass("out");
    });
});

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

// Unchecks all boxes for "Hide all samples" functionality
function uncheckAll(id){
    toggleAll(id, false);
}

// Checks all boxes for "Show all samples" functionality
function checkAll(id){
    toggleAll(id, true);
}

// Prepares data to be consumed by plot plugins
function prepareData(series, choiceContainer, customizeSeries){
    var datasets = [];

    // Add only selected series to the data set
    choiceContainer.find("input:checked").each(function (index, item) {
        var key = $(item).attr("name");
        var i = 0;
        var size = series.length;
        while(i < size && series[i].label != key)
            i++;
        if(i < size){
            var currentSeries = series[i];
            datasets.push(currentSeries);
            if(customizeSeries)
                customizeSeries(currentSeries);
        }
    });
    return datasets;
}

// create slider
$(function() {
    $( "#slider-vertical" ).slider({
      orientation: "vertical",
      range: "min",
      min: responseTimePercentilesInfos.data.result.minY,
      max: responseTimePercentilesInfos.data.result.maxY,
      value: 0,
      stop: function(event, ui ) {
       percentileThreshold= ui.value;
       refreshResponseTimePercentiles();
       $("#amount").val(percentileThreshold);
      }
    });
    $("#amount" ).val( $( "#slider-vertical" ).slider( "value" ) );
    $("#slider-vertical").children("div").css("background-color","purple");
    $("#amount" ).css("color", $("#slider-vertical").children("div").css("background-color"));
    $("#slider-vertical").children("div").css("opacity","0.3");
});

/*
 * Ignore case comparator
 */
function sortAlphaCaseless(a,b){
    return a.toLowerCase() > b.toLowerCase() ? 1 : -1;
};

/*
 * Creates a legend in the specified element with graph information
 */
function createLegend(choiceContainer, infos) {
    // Sort series by name
    var keys = [];
    $.each(infos.data.result.series, function(index, series){
        keys.push(series.label);
    });
    keys.sort(sortAlphaCaseless);

    // Create list of series with support of activation/deactivation
    $.each(keys, function(index, key) {
        var id = choiceContainer.attr('id') + index;
        $('<li />')
            .append($('<input id="' + id + '" name="' + key + '" type="checkbox" checked="checked" hidden />'))
            .append($('<label />', { 'text': key , 'for': id }))
            .appendTo(choiceContainer);
    });
    choiceContainer.find("label").click( function(){
        if (this.style.color !== "rgb(129, 129, 129)" ){
            this.style.color="#818181";
        }else {
            this.style.color="black";
        }
        $(this).parent().children().children().toggleClass("legend-disabled");
    });
    choiceContainer.find("label").mousedown( function(event){
        event.preventDefault();
    });
    choiceContainer.find("label").mouseenter(function(){
        this.style.cursor="pointer";
    });

    // Recreate graphe on series activation toggle
    choiceContainer.find("input").click(function(){
        infos.createGraph();
    });
}
